@using System.Security.Claims
@inject IServiceScopeFactory ServiceScopeFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EmployeeService EmployeeService
@inject IMapper Mapper
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@if (user != null)
{
    <div class="topbar">
        <div class="search-container" style="position: relative;">
            <input @bind="SearchQuery"
                   @bind:event="oninput"
                   @onkeypress="HandleKeyPress"
				   @onfocus="() => isFocused = true"
				   @onblur="async () => { await Task.Delay(200); isFocused = false; }"
                   type="text"
                   placeholder="Hledat stránku..."
                   class="search-input" />

            @if (isFocused && filteredRoutes.Any())
            {
                <ul class="search-suggestions">
                    @foreach (var route in filteredRoutes)
                    {
                        <li @onclick="() => NavigateTo(route.Url)">
                            @route.Label
                        </li>
                    }
                </ul>
            }

        </div>

        <div class="topbar-icons">
            <div class="user-profile">
                <img src="@(user.ProfilePicture != null ? $"data:image/png;base64,{Convert.ToBase64String(user.ProfilePicture)}" : "/images/admin.png")"
                     alt="User Profile"
                     class="profile-pic" />

                <div class="user-info">
                    <span>@user.Email</span>
                    <small>@user.JobTitle</small>
                </div>
                <a href="/logout" class="nav-link">Odhlásit se</a>
            </div>
        </div>
    </div>
}
else
{
    <h1>Loading...</h1>
}

@code {
    private bool isFocused = false;

    private string searchQuery = "";

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private DetailEmployeeViewModel? user;


    private string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            FilterRoutes();
        }
    }

    public record RouteItem(string Label, string Url);

    private List<RouteItem> routes = new()
    {
		new RouteItem("Rezervace", "/rezervace"),
		new RouteItem("Zákazníci", "/zakaznici"),
		new RouteItem("Pokoje", "/pokoje"),
		new RouteItem("Faktury", "/faktury"),
		new RouteItem("Platby", "/platby"),
		new RouteItem("Zaměstnanci", "/zamestnanci"),
		new RouteItem("Recenze", "/recenze"),
		new RouteItem("Přidat rezervaci", "/vytvorit-rezervaci"),
        new RouteItem("Přidat zákazníka", "/vytvorit-zakaznika"),
        new RouteItem("Přidat pokoj", "/vytvorit-pokoj"),
        new RouteItem("Přidat fakturu", "/vytvorit-fakturu"),
        new RouteItem("Přidat platbu", "/vytvorit-platbu"),
        new RouteItem("Přidat zaměstnance", "/vytvorit-zamestnance"),
        new RouteItem("Přidat recenzi", "/vytvorit-recenzi"),
		new RouteItem("Poznámky", "/ukoly"),
		new RouteItem("Nastavení", "/admin-nastaveni"),
		new RouteItem("Profil", "/muj-profil"),
		new RouteItem("Kalkulačka", "/kalkulacka")

    };

    private List<RouteItem> filteredRoutes = new();

    private void FilterRoutes()
    {
        filteredRoutes = routes
            .Where(r => r.Label.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void NavigateTo(string url)
    {
        searchQuery = "";
        filteredRoutes.Clear();
        NavigationManager.NavigateTo(url);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && filteredRoutes.Any())
        {
            NavigateTo(filteredRoutes.First().Url);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var scope = ServiceScopeFactory.CreateScope();
        var employeeService = scope.ServiceProvider.GetRequiredService<EmployeeService>();
        var mapper = scope.ServiceProvider.GetRequiredService<IMapper>();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdentity = authState.User;

        if (userIdentity.Identity is { IsAuthenticated: true })
        {
            var email = userIdentity.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            if (!string.IsNullOrEmpty(email))
            {
                var employee = await employeeService.GetEmployeeByEmail(email);
                user = mapper.Map<DetailEmployeeViewModel>(employee);
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }

    }

}
