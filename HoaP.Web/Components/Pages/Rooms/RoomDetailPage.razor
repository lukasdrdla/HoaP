@page "/pokoj/{roomId:int}"
@using HoaP.Application.ViewModels.Amenity
@using HoaP.Application.ViewModels
@using HoaP.Application.ViewModels.Review
@using HoaP.Application.ViewModels.Room
@inject RoomService RoomService
@inject AmenityService AmenityService
@inject ReservationService ReservationService
@inject NavigationManager NavigationManager
@inject ReviewService ReviewService
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]


<div class="container mt-2">
	@if (room == null)
	{
		<div class="text-center">
			<div class="spinner-border text-primary" role="status">
				<span class="sr-only"></span>
			</div>
			<p class="mt-2">Načítám podrobnosti o pokoji...</p>
		</div>
	}
	else
	{
		<div class="card border-0 shadow-sm mx-auto">
			<div class="card-body">
				<div class="container py-1">
					<div class="room-header">
						<h3>@room.RoomTypeName - @room.RoomNumber</h3>
						<div class="d-flex gap-2">
							<button class="btn @(room.IsDisable ? "btn-outline-success" : "btn-outline-danger")"
									@onclick="() => ToggleRoomStatus(room.Id)">
								@(room.IsDisable ? "Aktivovat pokoj" : "Deaktivovat pokoj")
							</button>
							<button class="btn btn-outline-secondary" @onclick="() => NavigateToUpdateRoom(room.Id)">Upravit pokoj</button>
							<button class="btn btn-success" @onclick="NavigateToCreateRezervation">+ Vytvořit rezervaci</button>
							<button class="btn btn-danger" @onclick="() => DeleteRoom(room.Id)">Odstranit pokoj</button>

						</div>
					</div>

					<div class="row">
						<!-- Room Image -->
						<div class="col-md-6 room-image">
							@if (roomImageBase64 != null)
							{
								//<img src="data:image/jpeg;base64,@roomImageBase64" alt="Room Image" class="img-fluid" />
								<img src="https://placehold.co/600x400" alt="Room Image" class="img-fluid" />
								
							}
							else
							{
								<p>Obrázek pokoje není k dispozici.</p>
							}
						</div>

						<!-- Room Details -->
						<div class="col-md-6 mt-4">
							<h1 class="room-price">@room.Price @room.CurrencySymbol/noc </h1>
							<div class="mb-3">
								<div class="row mt-4">
									<div class="col-6">
										<p><strong>Číslo pokoje:</strong> @room.RoomNumber</p>
										<p><strong>Typ pokoje:</strong> @room.RoomTypeName</p>
										<p><strong>Status pokoje:</strong> @room.RoomStatusName</p>
									</div>
									<div class="col-6">
										<p><strong>Max. Počet dosepělí:</strong> @room.MaxAdults</p>
										<p><strong>Max. Počet dětí:</strong> @room.MaxChildren</p>
										<p><strong>Popis pokoje</strong> @room.Description</p>
									</div>
								</div>
							</div>

							<!-- Room Amenities -->
							<h5>Vybavení pokoje</h5>
							<div class="row room-amenities">
								@foreach (var amenity in amenities)
								{
									<div class="col-6"> <i class="@amenity.Icon"></i> @amenity.Name</div>

								}

							</div>
						</div>
					</div>

					<!-- Room Booking History -->
					<div class="booking-history-table mt-5">
						<h5>Historie rezervací</h5>
						<div class="table-responsive-lg">
							<QuickGrid Items="filteredReservations.AsQueryable()" Pagination="paginationState" Class="w-100">
								<PropertyColumn Title="Zákazník" Property="@(x => x.CustomerName)" Sortable="true">
									<ColumnOptions>
										<input type="search" autofocus class="form-control" @bind="searchTerm" @oninput="SearchCustomers" placeholder="Search Customer" />
									</ColumnOptions>
								</PropertyColumn>
								<PropertyColumn Title="Check In" Property="@(x => x.CheckIn.ToShortDateString())" Sortable="true" />
								<PropertyColumn Title="Check Out" Property="@(x => x.CheckOut.ToShortDateString())" Sortable="true" />
								<PropertyColumn Title="Status" Property="@(x => x.ReservationStatusName)" Sortable="true" />
								<TemplateColumn Title="Cena">
									@context.TotalPrice @context.CurrencySymbol
								</TemplateColumn>

								<TemplateColumn Title="Akce">
									<div class="d-inline-flex">
										<button class="btn" @onclick="() => NavigateToDetailRezervation(context.Id)">
											<i class="bi bi-search"></i>
										</button>

									</div>
								</TemplateColumn>
							</QuickGrid>
						</div>
						<Paginator State="paginationState" />


					</div>
				</div>
			</div>
		</div>

		<!-- Hodnocení pokoje -->

		<div class="review-section mt-5">
			<h5 class="mb-4">Recenze pokoje</h5>

			@if (filteredReviews == null || !filteredReviews.Any())
			{
				<p>Žádné recenze k dispozici.</p>
			}
			else
			{
				@foreach (var review in paginatedReviews)
				{
					<div class="card mb-3 border-0 shadow-sm">
						<div class="card-body">
							<div class="d-flex justify-content-between align-items-center mb-2">
								<div class="d-flex align-items-center">
									<span class="text-warning me-2">
										@for (int i = 0; i < review.Rating; i++)
										{
											<i class="bi bi-star-fill"></i>
										}
										@for (int i = 0; i < (5 - review.Rating); i++)
										{
											<i class="bi bi-star"></i>
										}
									</span>
									<span class="text-muted">@review.CreatedAt.ToShortDateString()</span>
								</div>
								<div>
									<button class="btn btn-sm text-primary" @onclick="() => NavigateToUpdateReview(review.Id)">
										<i class="bi bi-pencil"></i>
									</button>
									<button class="btn btn-sm text-danger" @onclick="() => DeleteReview(review.Id)">
										<i class="bi bi-trash"></i>
									</button>
								</div>
							</div>
							<p class="mb-0">@review.Comment</p>
							<small class="text-muted">Hodnoceno uživatelem: @review.CustomerName</small>
						</div>
					</div>

				}
			}

			<!-- Paginator -->
			<div class="d-flex justify-content-between align-items-center mt-3">
				<button class="btn btn-outline-secondary" @onclick="GoToPreviousPage" disabled="@IsFirstPage">Předchozí</button>
				<span>Stránka @CurrentPage z @TotalPages</span>
				<button class="btn btn-outline-secondary" @onclick="GoToNextPage" disabled="@IsLastPage">Další</button>
			</div>
		</div>


		<hr />

	}
</div>


@code {

	[Parameter]
	public int roomId { get; set; }
	private DetailRoomViewModel room = new DetailRoomViewModel();

	private List<AmenityViewModel> amenities = new List<AmenityViewModel>();

	private List<ReservationViewModel> reservations = new List<ReservationViewModel>();
	private List<ReservationViewModel> filteredReservations = new List<ReservationViewModel>();

	private List<ReviewViewModel> filteredReviews = new();
	private List<ReviewViewModel> paginatedReviews = new();

	private int CurrentPage = 1;
	private int ItemsPerPage = 2;

	private int TotalPages => (int)Math.Ceiling((double)filteredReviews.Count / ItemsPerPage);

	private bool IsFirstPage => CurrentPage == 1;
	private bool IsLastPage => CurrentPage == TotalPages;

	private PaginationState paginationState = new PaginationState { ItemsPerPage = 20 };

	private string roomImageBase64;


	private string? searchTerm;

	protected override async Task OnInitializedAsync()
	{
		room = await RoomService.GetRoomByIdAsync(roomId);
		amenities = await AmenityService.GetAmenitiesByRoomIdAsync(roomId);
		reservations = await ReservationService.GetReservationsByRoomIdAsync(roomId);
		filteredReservations = reservations;
		filteredReviews = await ReviewService.GetRoomReviewsAsync(roomId);

		if (room.Image != null)
		{
			roomImageBase64 = Convert.ToBase64String(room.Image);
		}

		UpdatePagination();

	}




	private void UpdatePagination()
	{
		paginatedReviews = filteredReviews
			.Skip((CurrentPage - 1) * ItemsPerPage)
			.Take(ItemsPerPage)
			.ToList();
	}

	private void GoToPreviousPage()
	{
		if (!IsFirstPage)
		{
			CurrentPage--;
			UpdatePagination();
		}
	}

	private void GoToNextPage()
	{
		if (!IsLastPage)
		{
			CurrentPage++;
			UpdatePagination();
		}
	}

	private async void ToggleRoomStatus(int roomId)
	{
		if (room.IsDisable)
		{
			await RoomService.EnableRoomAsync(roomId);
		}
		else
		{
			await RoomService.DisableRoomAsync(roomId);
		}

		room = await RoomService.GetRoomByIdAsync(roomId);
		StateHasChanged();
	}
	

	private void SearchCustomers(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();

		if (!string.IsNullOrWhiteSpace(searchTerm))
		{
			filteredReservations = reservations.Where(r => r.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		}
		else
		{
			filteredReservations = reservations;
		}

	}

	private async Task DeleteRoom(int roomId)
	{
		var result = await JSRuntime.InvokeAsync<bool>("confirm", "Opravdu chcete odstranit pokoj?");
		if (result)
		{
			await RoomService.DeleteRoomAsync(roomId);
			NavigationManager.NavigateTo("/pokoje");
		}
	}

	private void DeleteReview(int reviewId)
	{
		ReviewService.DeleteReviewAsync(reviewId);
		filteredReviews = ReviewService.GetRoomReviewsAsync(roomId).Result;
		UpdatePagination();
	}

	private void NavigateToUpdateRoom(int roomId)
	{
		NavigationManager.NavigateTo($"/spravovat-pokoj/{roomId}");
	}

	private void NavigateToCreateRezervation()
	{
		NavigationManager.NavigateTo($"/vytvorit-rezervaci/pokoj/{roomId}");
	}

	private void NavigateToUpdateReview(int reviewId)
	{
		NavigationManager.NavigateTo($"/spravovat-recenzi/{reviewId}");
	}

	private void NavigateToDetailRezervation(int reservationId)
	{
		NavigationManager.NavigateTo($"/rezervace/{reservationId}");
	}




}
