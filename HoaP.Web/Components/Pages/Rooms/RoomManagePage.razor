@page "/spravovat-pokoj/{roomId:int?}"
@using HoaP.Application.ViewModels.Amenity
@inject RoomService RoomService
@inject RoomTypeService RoomTypeService
@inject AmenityService AmenityService
@inject RoomStatusService RoomStatusService
@inject NavigationManager NavigationManager
@inject IMapper Mapper
@rendermode InteractiveServer



<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="card-title text-center mb-4 page-title">@(roomId.HasValue ? "Upravit pokoj" : "Vytvořit pokoj")</h3>
            <EditForm Model="room" OnValidSubmit="HandleValidSubmit" FormName="AddRoom">
                <DataAnnotationsValidator />
                <ValidationSummary />



                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="RoomImg" class="form-label">Obrázek</label>
                        <InputText id="RoomImg" class="form-control" @bind-Value="room.Image" />
                    </div>

                    <div class="col-md-6">
                        <label for="RoomNumber" class="form-label">Číslo pokoje</label>
                        <InputText id="RoomNumber" class="form-control" @bind-Value="room.RoomNumber" />
                    </div>
                </div>


                <div class="mb-3 row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="roomType" class="form-label">Typ pokoje</label>
                            <div class="form-group position-relative">
                                <input type="text" class="form-control" placeholder="Vyhledat pokoj..." @bind="searchTerm" @oninput="SearchRoom" @onblur="HideRoomList" />

                                @if (filteredRoomTypes.Any())
                                {
                                    <ul class="list-group mt-1" style="max-height: 200px; overflow-y: auto; position: absolute; top: 100%; left: 0; right: 0; z-index: 1000;">
                                        @foreach (var room in filteredRoomTypes)
                                        {
                                            <li class="list-group-item list-group-item-action" @onmousedown="@(() => SelectRoomType(room))">@room.Name</li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label for="RoomStatus" class="form-label">Status</label>
                            <InputSelect id="RoomStatus" class="form-control" @bind-Value="room.RoomStatusId">
                                <option value="">Vyberte status</option>
                                @foreach (var status in roomStatuses)
                                {
                                    <option value="@status.Id">@status.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="MaxAdults" class="form-label">Max Dospělí</label>
                        <InputNumber id="MaxAdults" class="form-control" @bind-Value="room.MaxAdults" />
                    </div>
                    <div class="col-md-6">
                        <label for="MaxChildren" class="form-label">Max Děti</label>
                        <InputNumber id="MaxChildren" class="form-control" @bind-Value="room.MaxChildren" />
                    </div>

                </div>

                <h3>Select Amenities</h3>
                <div>
					@foreach (var amenity in amenities)
                    {
                        <div>
                            <input type="checkbox" @bind="@amenity.isSelected" />
                            <label>@amenity.Name</label>
                        </div>
                    }
                </div>

                <div class="form-group mb-3">
                    <label for="Price" class="form-label">Cena</label>
                    <InputNumber id="Price" class="form-control" @bind-Value="room.Price" />
                </div>


                <div class="form-group mb-3">
                    <label for="Description" class="form-label">Popis</label>
                    <InputTextArea id="Description" class="form-control" @bind-Value="room.Description" />
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary">@(roomId.HasValue ? "Uložit změny" : "Vytvořit pokoj")</button>
                    <a href="/pokoje" class="btn btn-outline-secondary">Zpět na seznam</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public int? roomId { get; set; }

    [SupplyParameterFromForm]
    private RoomFormViewModel room { get; set; } = new RoomFormViewModel();

    private string searchTerm;
    private List<RoomTypeViewModel> roomTypes = new List<RoomTypeViewModel>();
    private List<RoomTypeViewModel> filteredRoomTypes = new List<RoomTypeViewModel>();
    private List<AmenityViewModel> amenities = new List<AmenityViewModel>();

    private List<RoomStatusViewModel> roomStatuses = new List<RoomStatusViewModel>();

    protected override async Task OnInitializedAsync()
    {

        roomStatuses = await RoomStatusService.GetRoomStatusesAsync();
        roomTypes = await RoomTypeService.GetRoomTypesAsync();
        filteredRoomTypes = new List<RoomTypeViewModel>();
		amenities = await AmenityService.GetAmenitiesAsync();

		if (roomId.HasValue)
		{

			room = Mapper.Map<RoomFormViewModel>(await RoomService.GetRoomByIdAsync(roomId.Value));
			var roomType = roomTypes.FirstOrDefault(r => r.Id == room.RoomTypeId);
			if (roomType != null)
			{
				searchTerm = $"{roomType.Name}";
			}

			var roomAmenities = await AmenityService.GetAmenitiesByRoomIdAsync(roomId.Value);

			foreach (var amenity in amenities)
			{
				amenity.isSelected = roomAmenities.Any(a => a.Id == amenity.Id);
			}


		}
		else
		{
			room = new RoomFormViewModel();
		}


    }

    private async void HandleValidSubmit()
    {
		room.Amenities = amenities.Where(a => a.isSelected).Select(a => new AmenityViewModel { Id = a.Id }).ToList();

		if (roomId.HasValue)
		{
			await RoomService.UpdateRoomAsync(room);
		}
		else
		{
			await RoomService.CreateRoomAsync(room);
		}
        
        NavigationManager.NavigateTo("/pokoje");
    }

    private async Task SearchRoom(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
		if (!string.IsNullOrWhiteSpace(searchTerm))
		{
			filteredRoomTypes = roomTypes.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		}
		else
		{
			filteredRoomTypes = new List<RoomTypeViewModel>();
		}
    }

    private void SelectRoomType(RoomTypeViewModel roomType)
    {
        room.RoomTypeId = roomType.Id;
		searchTerm = $"{roomType.Name}";
        filteredRoomTypes = new List<RoomTypeViewModel>();
    }

    private void HideRoomList()
    {
        filteredRoomTypes.Clear();
    }

   
}