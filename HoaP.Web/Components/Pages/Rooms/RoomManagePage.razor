@page "/spravovat-pokoj/{roomId:int?}"
@page "/vytvorit-pokoj"
@inject RoomService RoomService
@inject RoomTypeService RoomTypeService
@inject AmenityService AmenityService
@inject RoomStatusService RoomStatusService
@inject NavigationManager NavigationManager
@inject CurrencyService CurrencyService
@inject IFileUploadService FileUploadService
@inject IMapper Mapper
@rendermode InteractiveServer
@attribute [Authorize]

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Chyba:</strong> @errorMessage
    </div>
}

<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="card-title text-center mb-4 page-title">@(roomId.HasValue ? "Upravit pokoj" : "Vytvořit pokoj")</h3>
            <EditForm Model="room" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="RoomImg" class="form-label">Obrázek</label>
                        <InputFile id="RoomImg" class="form-control" OnChange="HandleFileSelected" />
                        <p>@message</p>
                    </div>

                    <div class="col-md-6">
                        <label for="RoomNumber" class="form-label">Číslo pokoje</label>
                        <InputText id="RoomNumber" class="form-control" @bind-Value="room.RoomNumber" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="RoomTypeId" class="form-label">Typ pokoje</label>
                        <InputSelect id="RoomTypeId" class="form-select" @bind-Value="room.RoomTypeId">
                            @foreach (var type in roomTypes)
                            {
                                <option value="@type.Id">@type.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-6">
                        <label for="RoomStatusId" class="form-label">Stav</label>
                        <InputSelect id="RoomStatusId" class="form-select" @bind-Value="room.RoomStatusId">
                            @foreach (var status in roomStatuses)
                            {
                                <option value="@status.Id">@status.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="mb-4 row">
                    <div class="col-md-6">
                        <label for="MaxAdults" class="form-label">Max dospělých</label>
                        <InputNumber id="MaxAdults" class="form-control" @bind-Value="room.MaxAdults" />
                    </div>
                    <div class="col-md-6">
                        <label for="MaxChildren" class="form-label">Max dětí</label>
                        <InputNumber id="MaxChildren" class="form-control" @bind-Value="room.MaxChildren" />
                    </div>
                </div>

                <h4>Vybavení pokoje</h4>
                <div class="d-flex flex-wrap mb-4">
                    @foreach (var amenity in amenities)
                    {
                        <div class="form-check me-4 mb-2">
                            <input type="checkbox" class="form-check-input" @bind="amenity.isSelected" />
                            <label class="form-check-label">@amenity.Name</label>
                        </div>
                    }
                </div>

                <div class="mb-4 row">
                    <div class="col-md-6">
                        <label for="Price" class="form-label">Cena</label>
                        <InputNumber id="Price" class="form-control" @bind-Value="room.Price" />
                    </div>
                    <div class="col-md-6">
                        <label for="CurrencyId" class="form-label">Měna</label>
                        <InputSelect id="CurrencyId" class="form-select" @bind-Value="room.CurrencyId">
                            @foreach (var currency in currencies)
                            {
                                <option value="@currency.Id">@currency.Code (@currency.Symbol)</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="Description" class="form-label">Popis</label>
                    <InputTextArea id="Description" class="form-control" @bind-Value="room.Description" />
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary">@(roomId.HasValue ? "Uložit změny" : "Vytvořit pokoj")</button>
                    <a href="/pokoje" class="btn btn-outline-secondary">Zpět na seznam</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? roomId { get; set; }

    private RoomFormViewModel room = new();
    private List<RoomTypeViewModel> roomTypes = new();
    private List<RoomStatusViewModel> roomStatuses = new();
    private List<CurrencyViewModel> currencies = new();
    private List<AmenityViewModel> amenities = new();

    private string message;
    private string? errorMessage;

    private byte[] imageBytes;

    protected override async Task OnInitializedAsync()
    {
        roomTypes = await RoomTypeService.GetRoomTypesAsync();
        roomStatuses = await RoomStatusService.GetRoomStatusesAsync();
        currencies = await CurrencyService.GetCurrenciesAsync();
        amenities = await AmenityService.GetAmenitiesAsync();

        if (roomId.HasValue)
        {
            var detailRoom = await RoomService.GetRoomByIdAsync(roomId.Value);
			room = Mapper.Map<RoomFormViewModel>(detailRoom);


            var selectedIds = room.Amenities.Select(a => a.Id).ToHashSet();

            foreach (var amenity in amenities)
            {
                amenity.isSelected = selectedIds.Contains(amenity.Id);
            }

			Console.WriteLine($"RoomAmenities count: {room.Amenities.Count}");
            foreach (var ra in room.Amenities)
            {
				Console.WriteLine($"AmenityId: {ra.Id}, Name: {ra.Name}");
            }


        }
        else
        {
            var defaultCurrency = currencies.FirstOrDefault(c => c.Code == "CZK");
            room = new RoomFormViewModel
                {
                    CurrencyId = defaultCurrency?.Id ?? 1,
                    RoomStatusId = roomStatuses.FirstOrDefault(r => r.Name == "Volný")?.Id ?? 1
                };
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            room.Amenities = amenities
                .Where(a => a.isSelected)
                .Select(a => new AmenityViewModel { Id = a.Id })
                .ToList();

            if (roomId.HasValue)
                await RoomService.UpdateRoomAsync(room);
            else
                await RoomService.CreateRoomAsync(room);

            NavigationManager.NavigateTo("/pokoje");
        }
        catch (Exception ex)
        {
            errorMessage = $"Nepodařilo se uložit pokoj: {ex.Message}";
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            imageBytes = await FileUploadService.HandleFileUploadAsync(file);
            room.Image = imageBytes;
            message = "Soubor nahrán.";
        }
        catch (Exception ex)
        {
            message = "Chyba při nahrávání souboru: " + ex.Message;
        }
    }
}
