@page "/ukoly"
@using HoaP.Application.ViewModels.Task
@inject AccountService AccountService
@inject TaskService TaskService
@rendermode InteractiveServer

<div class="container mt-5">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="text-center mb-4 page-title">Seznam úkolů</h3>
            <div class="input-group mb-4">
                <input type="text" @bind="newTask" class="form-control" placeholder="Zadejte nový úkol" />
                <button class="btn btn-outline-secondary" @onclick="AddTask">Přidat</button>
            </div>

            @if (tasks == null || tasks.Count == 0)
            {
                <div class="text-center">
                    <span>Žádné úkoly</span>
                </div>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var task in tasks)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" @bind="task.IsCompleted" @onclick="() => ToggleTaskCompletion(task)" />
                                <label class="form-check-label" style="text-decoration: @(task.IsCompleted ? "line-through" : "none")">
                                    @task.Title
                                </label>
                            </div>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task)">Smazat</button>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    private string newTask;
    private List<TaskViewModel> tasks = new List<TaskViewModel>();
    private AppUser user;

    protected override async Task OnInitializedAsync()
    {
        user = await AccountService.GetCurrentUserAsync();
        tasks = await TaskService.GetTasksForEmployeeAsync(user.Id);
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask))
        {
            var task = new TaskViewModel { Title = newTask, IsCompleted = false };
            await TaskService.CreateTask(task, user.Id);
            tasks.Add(task);
            newTask = string.Empty;
        }
    }

    private async void ToggleTaskCompletion(TaskViewModel task)
    {
        task.IsCompleted = !task.IsCompleted;
        await TaskService.UpdateTask(task);
    }

    private async Task DeleteTask(TaskViewModel task)
    {
        tasks.Remove(task);
		await TaskService.DeleteTask(task.Id);
    }
}