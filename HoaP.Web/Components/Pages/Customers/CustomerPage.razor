@page "/zakaznici"
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container mt-5" @onmousedown="HideOptions">
    <div class="row">
        <div class="col-md-12 d-flex flex-fill">
            <div class="card border-0 shadow-sm mx-auto flex-fill">
                <div class="card-body">
                    <h3 class="text-center mb-4 page-title">Zakazníci</h3>
                    <div class="input-group mb-4">
                        <input type="text" class="form-control" placeholder="Hledat..." @oninput="SearchCustomers" />
                        <button class="btn btn-outline-secondary" type="button">Hledat</button>
                    </div>
                    <div class="d-flex justify-content-end mb-3">
                        <button class="btn btn-primary" @onclick="NavigateToAddCustomer">
                            <i class="bi bi-plus"></i> Přidat zákazníka
                        </button>
                    </div>
                    @if (customers == null || customers.Count == 0)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <p class="mt-2">Načítám zákazníky...</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="w-100">
                                <QuickGrid Items="filteredCustomers.AsQueryable()" Pagination="paginationState" Class=" w-100">
                                    <PropertyColumn Title="Jméno" Property="@(x => x.FirstName)" Sortable="true" />
                                    <PropertyColumn Title="Příjmení" Property="@(x => x.LastName)" Sortable="true" />
                                    <PropertyColumn Title="Email" Property="@(x => x.Email)" Sortable="true" />
                                    <PropertyColumn Title="Telefon" Property="@(x => x.Phone)" Sortable="true" />
                                    <PropertyColumn Title="Číslo dokladu" Property="@(x => x.PersonalIdentificationNumber)" Sortable="true" />
                                    <TemplateColumn Title="Akce">
                                        <div class="d-inline-flex">
                                            <button class="btn text-primary" @onclick="() => NavigateToCustomerDetail(context.Id)">
                                                <i class="bi bi-search"></i>
                                            </button>

                                            <button class="btn text-muted" @onclick="() => ToggleOptions(context.Id)">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>

                                            @if (VisibleCustomerId == context.Id)
                                            {
                                                <div class="options-menu" @ref="optionsMenu">
                                                    <button class="dropdown-item" @onmousedown="() => OpenDeleteConfirmation(context.Id)">Smazat</button>
                                                    <button class="dropdown-item" @onmousedown="() => NavigateToUpdateCustomer(context.Id)">Upravit</button>
                                                </div>
                                            }

                                        </div>
                                    </TemplateColumn>
                                </QuickGrid>
                            </table>
                            <Paginator State="paginationState" />
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
</div>

<DeleteModal Title="Smazaní zákazníka" ActionType="DeleteCustomer" IsVisible="@isDeleteModalVisible" OnClose="HandleModalClose" />

@code {
    private List<CustomerViewModel> customers;
    private List<CustomerViewModel> filteredCustomers;
    private bool isDeleteModalVisible = false;
    private int customerIdToDelete;
    private int? VisibleCustomerId;
    private ElementReference optionsMenu;
    private string searchTerm = string.Empty;
    private PaginationState paginationState = new PaginationState { ItemsPerPage = 20 };

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomers();
        filteredCustomers = customers;
    }

    private void ToggleOptions(int customerId)
    {
        VisibleCustomerId = VisibleCustomerId == customerId ? null : customerId;
    }

    private void HideOptions(MouseEventArgs e)
    {
        if (VisibleCustomerId.HasValue && optionsMenu.Context != null)
        {
            VisibleCustomerId = null;

        }
    }
    private void SearchCustomers(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterCustomers();
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers.Where(x => x.FirstName.ToLower().Contains(searchTerm.ToLower())
            || x.LastName.ToLower().Contains(searchTerm.ToLower())
            || x.Email.ToLower().Contains(searchTerm.ToLower())
            || x.Phone.ToLower().Contains(searchTerm.ToLower())
            || x.PersonalIdentificationNumber.ToLower().Contains(searchTerm.ToLower())
            ).ToList();
        }
    }

    private void OpenDeleteConfirmation(int customerId)
    {
        customerIdToDelete = customerId;
        isDeleteModalVisible = true;
    }

    private async Task HandleModalClose(bool result)
    {
        var customer = customers.FirstOrDefault(r => r.Id == customerIdToDelete);
        isDeleteModalVisible = false;

        if (result)
        {
			await CustomerService.DeleteCustomer(customerIdToDelete);
            customers.Remove(customer);
            filteredCustomers = customers;
        }
    }

    private void NavigateToCustomerDetail(int id)
    {
        NavigationManager.NavigateTo($"/zakaznik/{id}");
    }

    private void NavigateToAddCustomer()
    {
        NavigationManager.NavigateTo("/spravovat-zakaznika");
    }

	private void NavigateToUpdateCustomer(int id)
	{
		NavigationManager.NavigateTo($"/spravovat-zakaznika/{id}");
	}
}