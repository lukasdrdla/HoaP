@inject RoleService roleService

<div>
	<h4>Role uživatelů</h4>
    <div class="table-responsive-lg">
        <QuickGrid Items="filteredRoles.AsQueryable()" Pagination="paginationState" Class="w-100 table table-bordered mt-3">
            <PropertyColumn Title="Název" Property="@(x => x.Name)" Sortable="true">
                <ColumnOptions>
                    <input type="search" class="form-control" @bind="searchTerm" @oninput="SearchRoles" placeholder="Vyhledat roli..." />
                </ColumnOptions>
            </PropertyColumn>
            <TemplateColumn Title="Akce" Class="column-actions">
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="() => EditRole(context)">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteRole(context.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="paginationState" />
    </div>

    <div class="mt-4">
		<h5>@(editMode ? "Upravit roli" : "Přidat roli")</h5>
        <EditForm Model="currentRole" OnValidSubmit="HandleRoleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="currentRole.Name" />
            </div>
            <button class="btn btn-success" type="submit">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private List<RoleViewModel> roles = new();
	private List<RoleViewModel> filteredRoles = new();
    private RoleViewModel currentRole = new();
    private PaginationState paginationState = new PaginationState() { ItemsPerPage = 5 };
	private string? searchTerm;
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        roles = await roleService.GetRolesAsync();

		filteredRoles = roles;
    }

	private void SearchRoles(ChangeEventArgs e)
	{
        searchTerm = e.Value.ToString();
		if (string.IsNullOrWhiteSpace(searchTerm))
		{
			filteredRoles = roles;
		}
		else
		{
			filteredRoles = roles.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		}
    }


    private async Task HandleRoleSubmit()
    {
        if (editMode)
        {
            await roleService.UpdateRoleAsync(currentRole);
            editMode = false;
        }
        else
        {
            await roleService.CreateRoleAsync(currentRole);
			filteredRoles.Add(currentRole);
        }
        currentRole = new RoleViewModel();
    }

    private void EditRole(RoleViewModel role)
    {
        currentRole = role;
        editMode = true;
    }

    private async Task DeleteRole(string id)
    {
		var role = roles.FirstOrDefault(x => x.Id == id);
        if (role != null)
        {
            await roleService.DeleteRoleAsync(role.Id);
			filteredRoles.Remove(role);
        }
    }
}
