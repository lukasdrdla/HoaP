@inject ReservationStatusService reservationStatusService

<div>
    <h4>Stavy rezervací</h4>  
    <div class="table-responsive-lg">
        <QuickGrid Items="filteredReservationStatuses.AsQueryable()" Pagination="paginationState" Class="w-100 table table-bordered mt-3">
            <PropertyColumn Title="Název" Property="@(x => x.Name)" Sortable="true">
                <ColumnOptions>
                    <input type="search" class="form-control" @bind="searchTerm" @oninput="SearchReservationStatuses" placeholder="Vyhledat stav rezervace..." />
                </ColumnOptions>
            </PropertyColumn>
            <TemplateColumn Title="Akce" Class="column-actions">
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="() => EditReservationStatus(context)">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteReservationStatus(context.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="paginationState" />
    </div>

    <div class="mt-4">
        <h5>@(editMode ? "Upravit stav rezervace" : "Přidat stav rezervace")</h5>
        <EditForm Model="currentReservationStatus" OnValidSubmit="HandleReservationStatusSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Název</label>
                <InputText id="name" class="form-control" @bind-Value="currentReservationStatus.Name" />
            </div>
            <button class="btn btn-success" type="submit">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private List<ReservationStatusViewModel> reservationStatuses = new();
	private List<ReservationStatusViewModel> filteredReservationStatuses = new();
	private string? searchTerm;
	private PaginationState paginationState = new PaginationState() { ItemsPerPage = 5 };
    private ReservationStatusViewModel currentReservationStatus = new();
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        reservationStatuses = await reservationStatusService.GetReservationStatusesAsync();
        filteredReservationStatuses = reservationStatuses;

    }

    private void SearchReservationStatuses(ChangeEventArgs e)
    {
		searchTerm = e.Value.ToString();

		if (string.IsNullOrWhiteSpace(searchTerm))
		{
			filteredReservationStatuses = reservationStatuses;
		}
		else
		{
			filteredReservationStatuses = reservationStatuses.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		}
    }

    private async Task HandleReservationStatusSubmit()
    {
        if (editMode)
        {
            await reservationStatusService.UpdateReservationStatusAsync(currentReservationStatus);
            editMode = false;
        }
        else
        {
            await reservationStatusService.CreateReservationStatusAsync(currentReservationStatus);
			filteredReservationStatuses.Add(currentReservationStatus);
        }
        currentReservationStatus = new ReservationStatusViewModel();
    }

    private void EditReservationStatus(ReservationStatusViewModel status)
    {
        currentReservationStatus = status;
        editMode = true;
    }

    private async Task DeleteReservationStatus(int id)
    {
        var statusToDelete = reservationStatuses.FirstOrDefault(x => x.Id == id);
        if (statusToDelete != null)
        {
            await reservationStatusService.DeleteReservationStatusAsync(id);
            reservationStatuses.Remove(statusToDelete);
        }
    }
}
