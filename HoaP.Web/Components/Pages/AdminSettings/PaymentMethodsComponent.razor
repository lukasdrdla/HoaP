@inject PaymentMethodService paymentMethodService

<div>
	<h4>Platební metody</h4>
    <div class="table-responsive-lg">
        <QuickGrid Items="filteredPaymentMethods.AsQueryable()" Pagination="paginationState" Class="w-100 table table-bordered mt-3">
            <PropertyColumn Title="Název" Property="@(x => x.Name)" Sortable="true">
                <ColumnOptions>
                    <input type="search" class="form-control" @bind="searchTerm" @oninput="SearchPaymentMethods" placeholder="Vyhledat platební metodu..." />
                </ColumnOptions>
            </PropertyColumn>
            <TemplateColumn Title="Akce" Class="column-actions">
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="() => EditPaymentMethod(context)">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeletePaymentMethod(context.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="paginationState" />
    </div>

    <div class="mt-4">
		<h5>@(editMode ? "Upravit platební metodu" : "Přidat platební metodu")</h5>
        <EditForm Model="currentPaymentMethod" OnValidSubmit="HandlePaymentMethodSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="currentPaymentMethod.Name" />
            </div>
            <button class="btn btn-success" type="submit">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private List<PaymentMethodViewModel> paymentMethods = new();
	private List<PaymentMethodViewModel> filteredPaymentMethods = new();
    private PaymentMethodViewModel currentPaymentMethod = new();
	private PaginationState paginationState = new PaginationState() { ItemsPerPage = 5 };
	private string? searchTerm;
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPaymentMethods();
    }

    private async Task LoadPaymentMethods()
    {
        paymentMethods = await paymentMethodService.GetPaymentMethodsAsync();
		filteredPaymentMethods = paymentMethods;
    }

    private async Task HandlePaymentMethodSubmit()
    {
        if (editMode)
        {
            await paymentMethodService.UpdatePaymentMethodAsync(currentPaymentMethod);
            editMode = false;
        }
        else
        {
            await paymentMethodService.CreatePaymentMethodAsync(currentPaymentMethod);
			filteredPaymentMethods.Add(currentPaymentMethod);
        }
        currentPaymentMethod = new PaymentMethodViewModel();
    }

	private void SearchPaymentMethods(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();
		if (string.IsNullOrEmpty(searchTerm))
		{
			filteredPaymentMethods = paymentMethods;
		}
		else
		{
			filteredPaymentMethods = paymentMethods.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		}
	}

    private void EditPaymentMethod(PaymentMethodViewModel method)
    {
        currentPaymentMethod = method;
        editMode = true;
    }

    private async Task DeletePaymentMethod(int id)
    {
		var paymentMethod = paymentMethods.FirstOrDefault(x => x.Id == id);
        await paymentMethodService.DeletePaymentMethodAsync(id);
		filteredPaymentMethods.Remove(paymentMethod);
		filteredPaymentMethods = paymentMethods;
    }
}
