@inject MealPlanService mealPlanService

<div>
	<h4>Jídelní plány</h4>
    <div class="table-responsive-lg">
        <QuickGrid Items="filteredMealPlans.AsQueryable()" Pagination="paginationState" Class="w-100 table table-bordered mt-3">
            <PropertyColumn Title="Název" Property="@(x => x.Name)" Sortable="true">
                <ColumnOptions>
                    <input type="search" class="form-control" @bind="searchTerm" @oninput="SearchMealPlans" placeholder="Vyhledat plán stravování..." />
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Cena" Property="@(x => x.Price)" Sortable="true" />
            <TemplateColumn Title="Akce" Class="column-actions">
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="() => EditMealPlan(context)">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteMealPlan(context.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="paginationState" />
    </div>

    <div class="mt-4">
		<h5>@(editMode ? "Upravit jídelní plán" : "Přidat jídelní plán")</h5>
        <EditForm Model="currentMealPlan" OnValidSubmit="HandleMealPlanSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Název</label>
                <InputText id="name" class="form-control" @bind-Value="currentMealPlan.Name" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Cena</label>
                <InputNumber id="description" class="form-control" @bind-Value="currentMealPlan.Price" />
            </div>
            <button class="btn btn-success" type="submit">Uložit</button>
        </EditForm>
    </div>
</div>

@code {
    private List<MealPlanViewModel> mealPlans = new();
	private List<MealPlanViewModel> filteredMealPlans = new();
	private PaginationState paginationState = new PaginationState() { ItemsPerPage = 5 };
    private MealPlanViewModel currentMealPlan = new();
    private bool editMode = false;
	private string? searchTerm;


	protected override async Task OnInitializedAsync()
	{
		await LoadMealPlans();
	}

    private async Task LoadMealPlans()
	{
		mealPlans = await mealPlanService.GetMealPlansAsync();
		filteredMealPlans = mealPlans;
	}

	private void SearchMealPlans(ChangeEventArgs e)
	{
        searchTerm = e.Value.ToString();
        if (string.IsNullOrEmpty(searchTerm))
		{
			filteredMealPlans = mealPlans;
            }
		else
		{
            filteredMealPlans = mealPlans.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		}
	}

    private async Task HandleMealPlanSubmit()
    {
        if (editMode)
        {
			await mealPlanService.UpdateMealPlanAsync(currentMealPlan);
			currentMealPlan = new MealPlanViewModel();
			editMode = false;
            
        }
        else
        {
            
			await mealPlanService.CreateMealPlanAsync(currentMealPlan);
			filteredMealPlans.Add(currentMealPlan);
			currentMealPlan = new MealPlanViewModel();
        }

    }

    private void EditMealPlan(MealPlanViewModel plan)
    {
        currentMealPlan = plan;
        editMode = true;
    }

    private async Task DeleteMealPlan(int id)
    {
		var mealPlan = mealPlans.FirstOrDefault(r => r.Id == id);
		await mealPlanService.DeleteMealPlanAsync(id);
		filteredMealPlans.Remove(mealPlan);
		filteredMealPlans = mealPlans;

		
    }
}
