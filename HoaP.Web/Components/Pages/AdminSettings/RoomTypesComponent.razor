@inject RoomTypeService roomTypeService

<div>
	<h4>Typy pokojů</h4>
    <div class="table-responsive-lg">
        <QuickGrid Items="filteredRoomTypes.AsQueryable()" Pagination="paginationState" Class="w-100 table table-bordered mt-3">
            <PropertyColumn Title="Název" Property="@(x => x.Name)" Sortable="true">
                <ColumnOptions>
                    <input type="search" class="form-control" @bind="searchTerm" @oninput="SearchRoomTypes" placeholder="Vyhledat typ pokoje..." />
                </ColumnOptions>
            </PropertyColumn>
            <TemplateColumn Title="Akce" Class="column-actions">
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="() => EditRoomType(context)">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteRoomType(context.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="paginationState" />
    </div>

    <div class="mt-4">
		<h5>@(editMode ? "Upravit typ pokoje" : "Přidat typ pokoje")</h5>
        <EditForm Model="currentRoomType" OnValidSubmit="HandleRoomTypeSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Název</label>
                <InputText id="name" class="form-control" @bind-Value="currentRoomType.Name" />
				<ValidationMessage For="@(() => currentRoomType.Name)" />
            </div>
            <button class="btn btn-success" type="submit">Uložit</button>
        </EditForm>
    </div>
</div>

@code {
    private List<RoomTypeViewModel> roomTypes = new();
	private List<RoomTypeViewModel> filteredRoomTypes = new();
    private RoomTypeViewModel currentRoomType = new();
    private PaginationState paginationState = new PaginationState() { ItemsPerPage = 5 };
	private string? searchTerm;
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        roomTypes = await roomTypeService.GetRoomTypesAsync();

		filteredRoomTypes = roomTypes;
    }

	private void SearchRoomTypes(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();
		if (string.IsNullOrWhiteSpace(searchTerm))
        {
			filteredRoomTypes = roomTypes;
		}
		else
		{
			filteredRoomTypes = roomTypes.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		}
	}


    private async Task HandleRoomTypeSubmit()
    {
        if (editMode)
        {
            await roomTypeService.UpdateRoomTypeAsync(currentRoomType);
            editMode = false;
        }
        else
        {
            await roomTypeService.CreateRoomTypeAsync(currentRoomType);
			filteredRoomTypes.Add(currentRoomType);
        }
        currentRoomType = new RoomTypeViewModel();
    }

    private void EditRoomType(RoomTypeViewModel type)
    {
        currentRoomType = type;
        editMode = true;
    }

    private async Task DeleteRoomType(int id)
    {
		var roomType = roomTypes.FirstOrDefault(x => x.Id == id);

		if (roomType != null)
		{
            await roomTypeService.DeleteRoomTypeAsync(id);
			roomTypes.Remove(roomType);
		}

    }
}
