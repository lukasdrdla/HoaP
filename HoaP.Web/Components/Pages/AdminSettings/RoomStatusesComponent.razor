@inject RoomStatusService roomStatusService

<div>
	<h4>Stavy pokojů </h4>
    <div class="table-responsive-lg">
        <QuickGrid Items="filteredRoomStatuses.AsQueryable()" Pagination="paginationState" Class="w-100 table table-bordered mt-3">
            <PropertyColumn Title="Název" Property="@(x => x.Name)" Sortable="true">
                <ColumnOptions>
                    <input type="search" class="form-control" @bind="searchTerm" @oninput="SearchRoomStatuses" placeholder="Vyhledat stav pokoje..." />
                </ColumnOptions>
            </PropertyColumn>
            <TemplateColumn Title="Akce" Class="column-actions">
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="() => EditRoomStatus(context)">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteRoomStatus(context.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="paginationState" />
    </div>

    <div class="mt-4">
		<h5>@(editMode ? "Upravit stav pokoje" : "Přidat stav pokoje")</h5>
        <EditForm Model="currentRoomStatus" OnValidSubmit="HandleReservationStatusSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
				<label for="name" class="form-label">Název stavu pokoje</label>
                <InputText id="name" class="form-control" @bind-Value="currentRoomStatus.Name" />
                <ValidationMessage For="@(() => currentRoomStatus.Name)" />
            </div>
            <button class="btn btn-success" type="submit">Uložit</button>
        </EditForm>
    </div>
</div>

@code {
    private List<RoomStatusViewModel> roomStatuses = new();
    private List<RoomStatusViewModel> filteredRoomStatuses = new();

    private RoomStatusViewModel currentRoomStatus = new();
    private PaginationState paginationState = new PaginationState() { ItemsPerPage = 5 };
    private string? searchTerm;
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        roomStatuses = await roomStatusService.GetRoomStatusesAsync();
        filteredRoomStatuses = roomStatuses;
    }


    private void SearchRoomStatuses(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRoomStatuses = roomStatuses;
        }
        else
        {
            filteredRoomStatuses = roomStatuses.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void EditRoomStatus(RoomStatusViewModel status)
    {
		currentRoomStatus = status;
		editMode = true;
    }

    private async Task DeleteRoomStatus(int id)
    {
        var status = roomStatuses.FirstOrDefault(x => x.Id == id);
        if (status != null)
        {
            await roomStatusService.DeleteRoomStatusAsync(id);
			roomStatuses.Remove(status);
        }
    }

    private async Task HandleReservationStatusSubmit()
    {
        if (editMode)
        {
            await roomStatusService.UpdateRoomStatusAsync(currentRoomStatus);
        }
        else
        {
            await roomStatusService.CreateRoomStatusAsync(currentRoomStatus);
			filteredRoomStatuses.Add(currentRoomStatus);
        }

        editMode = false;
        currentRoomStatus = new RoomStatusViewModel();
    }
}