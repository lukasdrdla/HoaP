@page "/zamestnanec/{EmployeeId}"
@using HoaP.Application.ViewModels.Employee
@using HoaP.Application.ViewModels.Task
@inject EmployeeService EmployeeService
@inject TaskService TaskService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
				<h3 class="page-title">Zaměstnanec @employee?.FirstName @employee?.LastName</h3>
                <button class="btn btn-outline-primary" @onclick=" () => NavigateToUpdateEmployee(employee.Id)">Upravit</button>
            </div>
            @if (employee is not null)
            {
                <div class="text-center mb-5">
                    @if (profilePictureBase64 != null)
                    {
                        <img src="data:image/jpeg;base64,@profilePictureBase64" alt="Profilový obrázek" class="rounded-circle img-thumbnail profile-pic" />
                    }
                    else
                    {
                        <p>Profilový obrázek není k dispozici.</p>
                    }
                </div>
                <div class="row">
                    <div class="col-12 col-md-6 mb-3">
                        <span class="text-muted">Jméno:</span>
                        <span class="value">@($"{employee.FirstName} {employee.LastName}")</span>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <span class="text-muted">Uživatelské jméno:</span>
                        <span class="value">@employee.UserName</span>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <span class="text-muted">Email:</span>
                        <span class="value">@employee.Email</span>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <span class="text-muted">Telefon:</span>
                        <span class="value">@employee.PhoneNumber</span>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <span class="text-muted">Adresa bydliště:</span>
                        <span class="value">@employee.Address</span>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <span class="text-muted">Pozice:</span>
                        <span class="value">@employee.JobTitle</span>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <span class="text-muted">Datum nástupu:</span>
                        <span class="value">@employee.StartDate.ToString("dd.MM.yyyy")</span>
                    </div>
                </div>

                <h4 class="mt-5">Úkoly zaměstnance</h4>
                <table class="table table-bordered mt-3">
                    <thead>
                        <tr>
                            <th>Název úkolu</th>
                            <th>Stav</th>
                            <th>Akce</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (tasks != null && tasks.Any())
                        {
                            @foreach (var task in tasks)
                            {
                                <tr>
                                    <td>@task.Title</td>
                                    <td>
                                        <input type="checkbox" @bind="task.IsCompleted" @onclick="() => ToggleTaskCompletion(task)" />
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(task)">Smazat</button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" class="text-center text-muted">Žádné úkoly nejsou přiřazeny.</td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="mt-4">
                    <h5>Přidat nový úkol</h5>
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Název úkolu" @bind="newTaskTitle" />
                        <button class="btn btn-primary" @onclick="AddTask">Přidat</button>
                    </div>
                </div>
            }
            else
            {
                <p class="text-center text-muted">Zaměstnanec nebyl nalezen.</p>
            }

            <div class="text-center mt-5">
                <a href="/zamestnanci" class="btn btn-outline-secondary">Zpět na seznam zaměstnanců</a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string EmployeeId { get; set; }
    private DetailEmployeeViewModel employee;
    private List<TaskViewModel> tasks = new();
    private string newTaskTitle;

	private string profilePictureBase64;



    protected override async Task OnInitializedAsync()
    {
        employee = await EmployeeService.GetEmployeeByIdAsync(EmployeeId);

        if (employee.ProfilePicture != null)
        {
            profilePictureBase64 = Convert.ToBase64String(employee.ProfilePicture);
        }

        if (employee != null)
        {
            tasks = await TaskService.GetTasksForEmployeeAsync(employee.Id);
        }
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskTitle))
        {
            var newTask = new TaskViewModel { Title = newTaskTitle, IsCompleted = false };
            await TaskService.CreateTask(newTask, employee.Id);
            tasks.Add(newTask);
            newTaskTitle = string.Empty;
        }
    }

    private async Task DeleteTask(TaskViewModel task)
    {
        tasks.Remove(task);
        await TaskService.DeleteTask(task.Id);
    }

    private async Task ToggleTaskCompletion(TaskViewModel task)
    {
        task.IsCompleted = !task.IsCompleted;
        await TaskService.UpdateTask(task);
    }

	private void NavigateToUpdateEmployee(string employeeId)
	{
		NavigationManager.NavigateTo($"/spravovat-zamestnance/{employeeId}");
	}
}
