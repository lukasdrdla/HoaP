@page "/vytvorit-zamestnance"
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject InsuranceCompanyService InsuranceCompanyService
@inject IFileUploadService FileUploadService
@inject IMapper Mapper
@inject EmployeeService EmployeeService
@inject CurrencyService CurrencyService
@inject AccountService AccountService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin, Manager")]

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Chyba:</strong> @errorMessage
    </div>
}

<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="card-title text-center mb-4 page-title">Vytvořit zaměstnance</h3>
            <EditForm Model="employee" OnValidSubmit="HandleValidSubmit" FormName="AddCustomer">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="profilePicture" class="form-label">Profilový obrázek</label>
                        <InputFile id="profilePicture" class="form-control" OnChange="HandleFileSelected" />
                        <p>@message</p>
						<ValidationMessage For="@(() => employee.ProfilePicture)" />
                    </div>

                    <div class="col-md-6">
                        <label for="Email" class="form-label">Email</label>
                        <InputText id="Email" class="form-control" @bind-Value="employee.Email" />
						<ValidationMessage For="@(() => employee.Email)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="InsuranceCompanyId" class="form-label">Pojišťovna</label>
                        <InputSelect id="InsuranceCompanyId" class="form-select" @bind-Value="employee.InsuranceCompanyId">
                            <option value="">-- Vyberte pojišťovnu --</option>
                            @foreach (var company in insuranceCompanies)
                            {
                                <option value="@company.Id">@company.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => employee.InsuranceCompanyId)" />
                    </div>

                    <div class="col-md-6">
                        <label for="role" class="form-label">Role</label>
                        <InputSelect id="role" class="form-select" @bind-Value="employee.RoleId">
                            <option value="">Vyberte roli</option>
                            @foreach (var role in roles)
                            {
                                <option value="@role.Id">@role.Name</option>
                            }
                        </InputSelect>
						<ValidationMessage For="@(() => employee.RoleId)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-12">
                        <label for="username" class="form-label">Uživatelské jméno</label>
                        <InputText id="username" class="form-control" @bind-Value="employee.UserName" />
						<ValidationMessage For="@(() => employee.UserName)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="password" class="form-label">Heslo</label>
                        <InputText id="password" class="form-control" type="password" @bind-Value="employee.Password" />
						<ValidationMessage For="@(() => employee.Password)" />
                    </div>
                    <div class="col-md-6">
                        <label for="confirmPassword" class="form-label">Potvrďte heslo</label>
                        <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="employee.ConfirmPassword" />
						<ValidationMessage For="@(() => employee.ConfirmPassword)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="firstName" class="form-label">Jméno</label>
                        <InputText id="firstName" class="form-control" @bind-Value="employee.FirstName" />
						<ValidationMessage For="@(() => employee.FirstName)" />
                    </div>
                    <div class="col-md-6">
                        <label for="lastName" class="form-label">Příjmení</label>
                        <InputText id="lastName" class="form-control" @bind-Value="employee.LastName" />
						<ValidationMessage For="@(() => employee.LastName)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="personalId" class="form-label">Osobní číslo</label>
                        <InputText id="personalId" class="form-control" @bind-Value="employee.PersonalIdentificationNumber" />
						<ValidationMessage For="@(() => employee.PersonalIdentificationNumber)" />
                    </div>
                    <div class="col-md-6">
                        <label for="phoneNumber" class="form-label">Telefon</label>
                        <InputText id="phoneNumber" class="form-control" @bind-Value="employee.PhoneNumber" />
						<ValidationMessage For="@(() => employee.PhoneNumber)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="placeOfBirth" class="form-label">Místo narození</label>
                        <InputText id="placeOfBirth" class="form-control" @bind-Value="employee.PlaceOfBirth" />
						<ValidationMessage For="@(() => employee.PlaceOfBirth)" />
                    </div>
                    <div class="col-md-6">
                        <label for="address" class="form-label">Adresa</label>
                        <InputText id="address" class="form-control" @bind-Value="employee.Address" />
						<ValidationMessage For="@(() => employee.Address)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="city" class="form-label">Město</label>
                        <InputText id="city" class="form-control" @bind-Value="employee.City" />
						<ValidationMessage For="@(() => employee.City)" />
                    </div>
                    <div class="col-md-6">
                        <label for="postalCode" class="form-label">PSČ</label>
                        <InputText id="postalCode" class="form-control" @bind-Value="employee.PostalCode" />
						<ValidationMessage For="@(() => employee.PostalCode)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="country" class="form-label">Země</label>
                        <InputText id="country" class="form-control" @bind-Value="employee.Country" />
						<ValidationMessage For="@(() => employee.Country)" />
                    </div>
                    <div class="col-md-6">
                        <label for="jobTitle" class="form-label">Pozice</label>
                        <InputText id="jobTitle" class="form-control" @bind-Value="employee.JobTitle" />
						<ValidationMessage For="@(() => employee.JobTitle)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-3">
                        <label for="startDate" class="form-label">Datum začátku</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="employee.StartDate" />
						<ValidationMessage For="@(() => employee.StartDate)" />
                    </div>
                    <div class="col-md-6">
                        <label for="salary" class="form-label">Plat</label>
                        <div class="input-group">
                            <InputNumber id="salary" class="form-control" @bind-Value="employee.Salary" />
                            <span class="input-group-text">@GetCurrencySymbol()</span>
							<ValidationMessage For="@(() => employee.Salary)" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label for="CurrencyId" class="form-label">Měna</label>
                        <InputSelect id="CurrencyId" class="form-select" @bind-Value="employee.CurrencyId">
                            @foreach (var currency in currencies)
                            {
                                <option value="@currency.Id">@currency.Code (@currency.Symbol)</option>
                            }
                        </InputSelect>
						<ValidationMessage For="@(() => employee.CurrencyId)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-check-label">
                        <InputCheckbox class="form-check-input" @bind-Value="employee.IsEmployed" />
                        Zaměstnán
                    </label>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary">Vytvořit</button>
                    <a href="/zamestnanci" class="btn btn-outline-secondary">Zpět na seznam</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private EmployeeFormViewModel employee { get; set; } = new EmployeeFormViewModel();
    private List<InsuranceCompanyViewModel> insuranceCompanies = new();
    private string searchTerm = string.Empty;
    private List<InsuranceCompanyViewModel> filteredInsuranceCompanies = new();
    private List<RoleViewModel> roles = new();
    private List<CurrencyViewModel> currencies = new();

    private byte[] profilePictureBytes;
    private string message;
    private string? errorMessage;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        try
        {
            profilePictureBytes = await FileUploadService.HandleFileUploadAsync(file);
            employee.ProfilePicture = profilePictureBytes;
            message = "Obrázek byl úspěšně nahrán.";
        }
        catch
        {
            message = "Nahrání obrázku selhalo.";
        }
    }

    private string GetCurrencySymbol()
    {
        var currency = currencies.FirstOrDefault(c => c.Id == employee.CurrencyId);
        return currency != null ? currency.Symbol : string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        insuranceCompanies = await InsuranceCompanyService.GetInsuranceCompaniesAsync();
        roles = await AccountService.GetRolesAsync();
        currencies = await CurrencyService.GetCurrenciesAsync();
        employee.CurrencyId = currencies.FirstOrDefault(c => c.Code == "CZK")?.Id ?? 0;
        employee.IsEmployed = true;
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        filteredInsuranceCompanies = insuranceCompanies.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void HideCompanyList()
    {
        filteredInsuranceCompanies.Clear();
    }

    private void SelectCompany(InsuranceCompanyViewModel company)
    {
        employee.InsuranceCompanyId = company.Id;
        searchTerm = company.Name;
        filteredInsuranceCompanies.Clear();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(employee.Password) || employee.Password != employee.ConfirmPassword)
            {
                errorMessage = "Heslo je povinné a musí se shodovat.";
                return;
            }

            await AccountService.RegisterEmployeeAsync(employee);
            NavigationManager.NavigateTo("/zamestnanci");
        }
        catch (DbUpdateException)
        {
            errorMessage = "Chyba při aktualizaci databáze. Zkontrolujte, zda jsou všechny povinné údaje vyplněny správně.";
        }
        catch (Exception ex)
        {
            errorMessage = "Nastala chyba při zpracování požadavku: " + ex.Message;
        }
    }
}
