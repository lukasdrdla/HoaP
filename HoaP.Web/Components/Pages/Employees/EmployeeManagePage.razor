@page "/spravovat-zamestnance/{Id}"
@page "/vytvorit-zamestnance"
@inject NavigationManager NavigationManager
@inject InsuranceCompanyService InsuranceCompanyService
@inject IFileUploadService FileUploadService
@inject IMapper Mapper
@inject EmployeeService EmployeeService
@inject AccountService AccountService
@rendermode InteractiveServer



<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="card-title text-center mb-4 page-title">@(Id == null ? "Vytvořit zaměstnance" : "Upravit zaměstnance")</h3>
            <EditForm Model="employee" OnValidSubmit="HandleValidSubmit" FormName="AddCustomer">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="profilePicture" class="form-label">Profilový obrázek</label>
                        <InputFile id="profilePicture" class="form-control" OnChange="HandleFileSelected" />
						<p>@message</p>
                    </div>

                    <div class="col-md-6">
                        <label for="Email" class="form-label">Email</label>
                        <InputText id="Email" class="form-control" @bind-Value="employee.Email" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="insurenceId" class="form-label">Pojištovna</label>
                        <div class="form-group position-relative">
                            <input type="text" class="form-control" placeholder="Hledat pojištovnu.." @bind="searchTerm" @oninput="OnInputChange" @onblur="HideCompanyList" />

                            @if (filteredInsuranceCompanies.Any())
                            {
                                <ul class="list-group mt-1" style="max-height: 200px; overflow-y: auto; position: absolute; top: 100%; left: 0; right: 0; z-index: 1000;">
                                    @foreach (var company in filteredInsuranceCompanies)
                                    {
                                        <li class="list-group-item list-group-item-action" @onmousedown="@(() => SelectCompany(company))">@company.Name</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
						<label for="role" class="form-label">Role</label>
                    </div>
                 
					<div class="col-md-6">
						<label for="username" class="form-label">Uživatelské jméno</label>
						<InputText id="username" class="form-control" @bind-Value="employee.UserName" />
                    </div>
               </div>


                @if(Id == null)
                {
                    <div class="mb-3 row">
                        <div class="col-md-6">
                            <label for="password" class="form-label">Heslo</label>
                            <InputText id="password" class="form-control" type="password" @bind-Value="employee.Password" />
                        </div>

                        <div class="col-md-6">
                            <label for="confirmPassword" class="form-label">Potvrďte heslo</label>
                            <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="employee.ConfirmPassword" />
                        </div>
                    </div>
                }

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="firstName" class="form-label">Jméno</label>
                        <InputText id="firstName" class="form-control" @bind-Value="employee.FirstName" />
                    </div>

                    <div class="col-md-6">
                        <label for="lastName" class="form-label">Příjmení</label>
                        <InputText id="lastName" class="form-control" @bind-Value="employee.LastName" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="personalId" class="form-label">Osobní číslo</label>
                        <InputText id="personalId" class="form-control" @bind-Value="employee.PersonalIdentificationNumber" />
                    </div>

                    <div class="col-md-6">
                        <label for="phoneNumber" class="form-label">Telefon</label>
                        <InputText id="phoneNumber" class="form-control" @bind-Value="employee.PhoneNumber" />
                    </div>

                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="placeOfBirth" class="form-label">Místo narození</label>
                        <InputText id="placeOfBirth" class="form-control" @bind-Value="employee.PlaceOfBirth" />
                    </div>
                    <div class="col-md-6">
                        <label for="address" class="form-label">Adresa</label>
                        <InputText id="address" class="form-control" @bind-Value="employee.Address" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="city" class="form-label">Město</label>
                        <InputText id="city" class="form-control" @bind-Value="employee.City" />
                    </div>

                    <div class="col-md-6">
                        <label for="postalCode" class="form-label">PSČ</label>
                        <InputText id="postalCode" class="form-control" @bind-Value="employee.PostalCode" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="country" class="form-label">Země</label>
                        <InputText id="country" class="form-control" @bind-Value="employee.Country" />
                    </div>

                    <div class="col-md-6">
                        <label for="jobTitle" class="form-label">Pozice</label>
                        <InputText id="jobTitle" class="form-control" @bind-Value="employee.JobTitle" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="startDate" class="form-label">Datum začátku</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="employee.StartDate" />
                    </div>

                    <div class="col-md-6">
                        <label for="salary" class="form-label">Plat</label>
                        <InputNumber id="salary" class="form-control" @bind-Value="employee.Salary" />
                    </div>
                </div>


                <div class="mb-3">
                    <label class="form-check-label">
                        <InputCheckbox class="form-check-input" @bind-Value="employee.IsEmployed" />
                        Zaměstnán
                    </label>
                </div>









                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary">@(Id == null ? "Vytvořit" : "Uložit")</button>
                    <a href="/zamestnanci" class="btn btn-outline-secondary">Zpět na seznam</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    private EmployeeFormViewModel employee { get; set; } = new EmployeeFormViewModel();
    private List<InsuranceCompanyViewModel> insuranceCompanies = new List<InsuranceCompanyViewModel>();
    private string searchTerm = string.Empty;
    private List<InsuranceCompanyViewModel> filteredInsuranceCompanies = new List<InsuranceCompanyViewModel>();

    private byte[] profilePictureBytes;
	private string message;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
		var file = e.File;
        try {
			profilePictureBytes = await FileUploadService.HandleFileUploadAsync(file);
			employee.ProfilePicture = profilePictureBytes;

			message = "Obrázek byl úspěšně nahrán.";
        }
		catch (Exception ex)
		{
			message = "Nahrání obrázku selhalo.";
        }

    }


    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            employee = Mapper.Map<EmployeeFormViewModel>(await EmployeeService.GetEmployeeByIdAsync(Id));
			var company = await InsuranceCompanyService.GetInsuranceCompanyByIdAsync(employee.InsuranceCompanyId);
			searchTerm = company.Name;

        }

		insuranceCompanies = await InsuranceCompanyService.GetInsuranceCompaniesAsync();
		filteredInsuranceCompanies = new List<InsuranceCompanyViewModel>();

        
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        filteredInsuranceCompanies = insuranceCompanies.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void HideCompanyList()
    {
        filteredInsuranceCompanies.Clear();
    }

    private void SelectCompany(InsuranceCompanyViewModel company)
    {
        employee.InsuranceCompanyId = company.Id;
        searchTerm = company.Name;
        filteredInsuranceCompanies.Clear();
    }

    private async Task HandleValidSubmit()
    {
       
		if (Id == null)
		{
			await AccountService.RegisterEmployeeAsync(employee);
		}
		else
		{
			await EmployeeService.UpdateEmployeeAsync(employee);
		}
        
		
        NavigationManager.NavigateTo("/zamestnanci");
    }

}