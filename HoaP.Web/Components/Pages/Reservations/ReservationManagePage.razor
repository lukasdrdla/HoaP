@page "/spravovat-rezervaci/{reservationId:int}"
@page "/vytvorit-rezervaci"
@page "/vytvorit-rezervaci/zakaznik/{customerId:int}"
@page "/vytvorit-rezervaci/pokoj/{roomId:int}"
@using HoaP.Application.ViewModels.ServiceR
@using HoaP.Web.Components.Pages.Customers
@using System.Globalization

@inject ReservationService ReservationService
@inject NavigationManager NavigationManager
@inject RoomService RoomService
@inject CustomerService CustomerService
@inject MealPlanService MealPlanService
@inject ReservationStatusService ReservationStatusService
@inject CurrencyService CurrencyService
@inject ServiceService ServiceService
@attribute [Authorize]


@inject IMapper Mapper

@rendermode InteractiveServer


@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger">
		<strong>Chyba:</strong> @errorMessage
	</div>
}

<div class="container mt-2">
	<div class="card border-0 shadow-sm mx-auto">
		<div class="card-body">
			<h3 class="card-title text-center  page-title">@(reservationId == null ? "Vytvořit rezervaci" : "Upravit rezervaci")</h3>
			@if (reservationId != null)
			{
				<p class="text-center">Rezervace č. @reservationId</p>
			}

			@if (reservationId == null && roomId == null)
			{
				<div class="d-flex justify-content-center mb-3">
					<button class="btn btn-outline-primary me-2" @onclick="() => SwitchMode(ReservationMode.ByDate)"
					disabled="@(mode == ReservationMode.ByDate)">
						Pokoj - datum
					</button>
					<button class="btn btn-outline-primary" @onclick="() => SwitchMode(ReservationMode.ByRoom)"
					disabled="@(mode == ReservationMode.ByRoom)">
						Datum - pokoj
					</button>
				</div>
			}




			<EditForm Model="reservation" OnValidSubmit="HandleValidSubmit">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<div class="form-group mb-3">
					<div class="form-group mb-3">
						<div class="d-flex justify-content-end">
							<button type="button" class="btn btn-primary" @onclick=" () => showAddCustomerModal = true">
								<i class="bi bi-plus-circle me-1"></i> Přidat nového zákazníka
							</button>
						</div>
						<label for="CustomerId" class="form-label">Zákazník</label>
						<div class="form-group position-relative">
							<input type="text" class="form-control" placeholder="Hledat zákazníka" @bind="searchCustomerTerm" @bind:event="oninput" @bind:after="FilterCustomers" @onblur="HideCustomerList" />
							@if (filteredCustomers.Any())
							{
								<ul class="list-group mt-1" style="max-height: 200px; overflow-y: auto; position: absolute; top: 100%; left: 0; right: 0; z-index: 1000;">
									@foreach (var customer in filteredCustomers)
									{
										<li class="list-group-item list-group-item-action" @onmousedown="() => SelectCustomer(customer)">
											<div>
												<strong> Jméno:</strong> @customer.FirstName @customer.LastName
											</div>
											<div>
												<strong> Kontaktní údaje:</strong> @customer.Email, @customer.Phone
											</div>
											<div>
												<strong> Adresa:</strong> @customer.Address, @customer.City, @customer.PostalCode, @customer.Country
											</div>
											<div>
												<strong> Číslo dokladu:</strong> @customer.DocumentNumber
											</div>


										</li>
									}
								</ul>
							}
						</div>
					</div>
				</div>


				<div class="d-flex justify-content-between">
					<label class="form-label">Hosté</label>
					<div>
						<button type="button" class="btn btn-outline-primary me-2" @onclick="ToggleSearchGuest">Přidat existujícího hosta</button>
						<button type="button" class="btn btn-primary" @onclick="AddGuest">Přidat nového hosta</button>
					</div>
				</div>

				@if (isGuestSearchVisible)
				{
					<input type="text" class="form-control mb-2 mt-2" placeholder="Hledat hosta" @bind="searchGuestTerm" @bind:event="oninput" @bind:after="FilterGuestCustomers" />
					@if (filteredGuestCustomers.Any())
					{
						<ul class="list-group mb-3">
							@foreach (var customer in filteredGuestCustomers)
							{
								<li class="list-group-item list-group-item-action" @onclick="() => AddExistingGuest(customer)">
									<strong>@customer.FirstName @customer.LastName</strong><br />
									@customer.Email, @customer.Phone
								</li>
							}
						</ul>
					}
				}




				<div class="form-group mb-3">
					@foreach (var guest in reservation.Guests)
					{
						<div class="border rounded p-3 mb-4 mt-2 bg-light-subtle">
							<div class="row">
								<div class="col-md-6 mb-3">
									<label class="form-label">Jméno</label>
									<InputText class="form-control" @bind-Value="guest.FirstName" />
								</div>
								<div class="col-md-6 mb-3">
									<label class="form-label">Příjmení</label>
									<InputText class="form-control" @bind-Value="guest.LastName" />
								</div>

								<div class="col-md-6 mb-3">
									<label class="form-label">Číslo dokladu</label>
									<InputText class="form-control" @bind-Value="guest.DocumentNumber" />
								</div>
								<div class="col-md-6 mb-3">
									<label class="form-label">Datum vydání</label>
									<InputDate class="form-control" @bind-Value="guest.DateOfIssue" />
								</div>

								<div class="col-md-6 mb-3">
									<label class="form-label">Datum expirace</label>
									<InputDate class="form-control" @bind-Value="guest.DateOfExpiry" />
								</div>
								<div class="col-md-6 mb-3">
									<label class="form-label">Datum narození</label>
									<InputDate class="form-control" @bind-Value="guest.DateOfBirth" />
								</div>

								<div class="col-md-6 mb-3">
									<label class="form-label">Místo narození</label>
									<InputText class="form-control" @bind-Value="guest.PlaceOfBirth" />
								</div>
								<div class="col-md-6 mb-3">
									<label class="form-label">Rodné číslo</label>
									<InputText class="form-control" @bind-Value="guest.PersonalIdentificationNumber" />
								</div>

								<div class="col-md-6 mb-3">
									<label class="form-label">Národnost</label>
									<InputText class="form-control" @bind-Value="guest.Nationality" />
								</div>
								<div class="col-md-6 mb-3">
									<label class="form-label">Telefon</label>
									<InputText class="form-control" @bind-Value="guest.Phone" />
								</div>

								<div class="col-md-6 mb-3">
									<label class="form-label">Email</label>
									<InputText class="form-control" type="email" @bind-Value="guest.Email" />
								</div>
								<div class="col-md-6 mb-3">
									<label class="form-label">Adresa</label>
									<InputText class="form-control" @bind-Value="guest.Address" />
								</div>

								<div class="col-md-4 mb-3">
									<label class="form-label">Město</label>
									<InputText class="form-control" @bind-Value="guest.City" />
								</div>
								<div class="col-md-4 mb-3">
									<label class="form-label">Země</label>
									<InputText class="form-control" @bind-Value="guest.Country" />
								</div>
								<div class="col-md-4 mb-3">
									<label class="form-label">PSČ</label>
									<InputText class="form-control" @bind-Value="guest.PostalCode" />
								</div>
							</div>

							<div class="text-end">
								<button type="button" class="btn btn-danger" @onclick="() => reservation.Guests.Remove(guest)">
									<i class="bi bi-trash me-1"></i> Odebrat hosta
								</button>
							</div>
						</div>
					}

				</div>

				@if (mode == ReservationMode.ByDate)
				{
					<div class="form-group mb-3">
						<div class="form-group mb-3">
							<label for="RoomId" class="form-label">Pokoj</label>
							<div class="form-group position-relative">
								<input type="text" class="form-control" placeholder="Hledat pokoj"
								@bind="searchRoomTerm"
								@bind:event="oninput"
								@onfocus="ShowAllRooms"
								@onblur="HideRoomList" />

								@if (filteredRooms.Any())
								{
									<ul class="list-group btn-secondary mt-1" style="max-height: 200px; overflow-y: auto; position: absolute; top: 100%; left: 0; right: 0; z-index: 1000;">
										@foreach (var room in filteredRooms)
										{
											<li class="list-group-item list-group-item-action" @onmousedown="() => SelectRoom(room)">
												<div>
													<strong> Číslo pokoje:</strong> @room.RoomNumber
												</div>
												<div>
													<strong> Typ pokoje:</strong> @room.RoomTypeName
												</div>
												<div>
													<strong> Kapacita:</strong> @room.MaxAdults dospělí, @room.MaxChildren děti
												</div>
												<div>
													<strong> Cena:</strong> @room.Price Kč za noc
												</div>
											</li>
										}
									</ul>
								}

							</div>
						</div>
					</div>

					<div class="mb-4 row">
						<div class="col-md-6">
							<label for="CheckIn" class="form-label">Check In</label>
							<div class="input-group">
								<InputText class="form-control"
								@bind-Value="checkInText"
								@oninput="ValidateCheckInText" />


								<button type="button" class="btn btn-outline-secondary" @onclick="OpenCheckInCalendar">
									<i class="bi bi-calendar"></i>
								</button>
							</div>

							@if (isCheckInCalendarVisible)
							{
								<div class="calendar-overlay" @onclick="CloseCalendars">
									<div class="calendar-popup" @onclick:stopPropagation>
										<Picker DisableDates="unavailableDates" OnDateSelected="OnDateSelectIn" />
									</div>
								</div>
							}

						</div>

						<div class="col-md-6">
							<label for="CheckOut" class="form-label">Check Out</label>
							<div class="input-group">
								<InputText class="form-control"
										   @bind-Value="checkOutText"
										   oninput="ValidateCheckOutText" />

								<button type="button" class="btn btn-outline-secondary" @onclick="OpenCheckOutCalendar">
									<i class="bi bi-calendar"></i>
								</button>
							</div>

						</div>
					</div>

					@if (isCheckInCalendarVisible)
					{
						<div class="calendar-overlay" @onclick="CloseCalendars">
							<div class="calendar-popup" @onclick:stopPropagation>
								<Picker DisableDates="unavailableDates" OnDateSelected="OnDateSelectIn" />
							</div>
						</div>
					}

					@if (isCheckOutCalendarVisible)
					{
						<div class="calendar-overlay" @onclick="CloseCalendars">
							<div class="calendar-popup" @onclick:stopPropagation>
								<Picker DisableDates="unavailableDates" OnDateSelected="OnDateSelectOut" />
							</div>
						</div>
					}



				}

				@if (mode == ReservationMode.ByRoom)
				{
					<div class="mb-4 row">
						<div class="col-md-6">
							<label for="CheckIn" class="form-label">Check In</label>
							<div class="input-group">
								<input type="text" class="form-control" placeholder="Vyberte datum"
								value="@reservation.CheckIn.ToShortDateString()" @onclick="OpenCheckInCalendarFromDateFirst" readonly style="cursor: pointer;" />
							</div>
							@if (isCheckInCalendarVisibleFromDateFirst)
							{
								<div class="calendar-overlay">
									<Picker  OnDateSelected="OnDateSelectIn" />
								</div>
							}
						</div>

						<div class="col-md-6">
							<label for="CheckOut" class="form-label">Check Out</label>
							<div class="input-group">
								<input type="text" class="form-control" placeholder="Vyberte datum"
								value="@reservation.CheckOut.ToShortDateString()" @onclick="OpenCheckOutCalendarFromDateFirst" readonly style="cursor: pointer;" />
							</div>
							@if (isCheckOutCalendarVisibleFromDateFirst)
							{
								<div class="calendar-overlay">
									<Picker OnDateSelected="OnDateSelectOut" />
								</div>
							}
						</div>

						<button type="button" class="btn btn-primary mt-3" @onclick="LoadAvailableRooms">Zobrazit dostupné pokoje</button>

					</div>

					<input type="text" placeholder="Vyhledat pokoj" class="form-control" @bind="searchRoomTermByDate" @bind:event="oninput" @bind:after="FilterRoomsByDate" @onblur="HideRoomList" />

					@if (availableRooms.Any())
					{
						<div class="form-group">
							<ul class="list-group mt-1" style="max-height: 400px; overflow-y: auto;">
								@foreach (var room in availableRooms)
								{
									<li class="list-group-item list-group-item-action d-flex justify-content-between">
										<div>
											<strong>Pokoj:</strong> @room.RoomNumber<br />
											<strong>Typ:</strong> @room.RoomTypeName<br />
											<strong>Cena:</strong> @room.Price Kč za noc
										</div>
										<a class="btn btn-outline-primary d-flex align-items-center justify-content-center" @onclick="() => SelectRoomByRoom(room)">
											Vybrat
										</a>
									</li>
								}
							</ul>
						</div>
					}
					@if (selectedRoom != null)
					{
						<div class="mt-4">
							<h5>Vybraný pokoj:</h5>
							<p><strong>Pokoj:</strong> @selectedRoom.RoomNumber</p>
							<p><strong>Typ:</strong> @selectedRoom.RoomTypeName</p>
							<p><strong>Cena:</strong> @selectedRoom.Price Kč za noc</p>
						</div>
					}
				}

				<div class="mb-3 row">
					<div class="col-md-6">
						<label for="Adults" class="form-label">Dospělí</label>
						<select id="Adults" class="form-control" @onchange="OnAdultsSelect" value="@reservation.Adults">
							@for (int i = 0; i <= selectedRoom?.MaxAdults; i++)
							{
								<option value="@i">@i</option>
							}
						</select>
					</div>

					<div class="col-md-6">
						<label for="Children" class="form-label">Děti</label>
						<select id="Children" class="form-control" @onchange="OnChildrenSelect" value="@reservation.Children">
							@for (int i = 0; i <= selectedRoom?.MaxChildren; i++)
							{
								<option value="@i">@i</option>
							}
						</select>
					</div>
				</div>

				<div class="form-group mb-3">
					<label for="Total" class="form-label">Cena:</label>
					<div class="input-group">
						<InputNumber id="Total" class="form-control" @bind-Value="reservation.TotalPrice" />
						<span class="input-group-text">@GetCurrencySymbol()</span>
					</div>
				</div>


				<div class="form-group mb-3">
					<label for="CurrencyId" class="form-label">Měna</label>
					<select id="CurrencyId" class="form-control" @onchange="OnCurrencyChanged">
						@foreach (var currency in currencies)
						{
							<option value="@currency.Id" selected="@(currency.Id == reservation.CurrencyId)">
								@currency.Name (@currency.Symbol)
							</option>
						}
					</select>
				</div>



				<div class="mb-3 row">
					<div class="col-md-6">

						<label for="MealPlanId" class="form-label">Stravování</label>
						<select id="MealPlanId" class="form-control" @onchange="OnMealSelect" value="@reservation.MealPlanId">
							<option value="">Vyber stravování</option>
							@foreach (var mealPlan in mealPlans)
							{
								var isSelected = mealPlan.Id == reservation.MealPlanId;
								var baseCurrency = currencies.FirstOrDefault(c => c.Code == "CZK");
								var targetCurrency = currencies.FirstOrDefault(c => c.Id == reservation.CurrencyId);
								var price = baseCurrency != null && targetCurrency != null
								? mealPlan.Price * baseCurrency.Rate / targetCurrency.Rate
								: mealPlan.Price;

								var symbol = GetCurrencySymbol();

								<option value="@mealPlan.Id">@mealPlan.Name (@price.ToString("0.##") @symbol)</option>
							}

						</select>

					</div>

					<div class="col-md-6">
						<label for="ReservationStatusId" class="form-label">Status</label>
						<InputSelect id="ReservationStatusId" class="form-control" @bind-Value="reservation.ReservationStatusId">
							<option value="">Vyber status</option>
							@foreach (var reservationStatus in reservationStatuses)
							{
								<option value="@reservationStatus.Id">@reservationStatus.Name</option>
							}
						</InputSelect>
					</div>
				</div>

				<div class="form-group mb-3">
					<label for="SpecialRequest" class="form-label">Speciální požadavky</label>
					<InputTextArea id="SpecialRequest" class="form-control" @bind-Value="reservation.SpecialRequest" />
				</div>

				<div class="form-group mb-3">
					<label for="adminNote" class="form-label">Poznámka zaměstnance</label>
					<InputTextArea id="adminNote" class="form-control" @bind-Value="reservation.AdminNote" />
				</div>

				<h5>Doplňkové služby</h5>

				@foreach (var service in allServices)
				{
					var selected = reservation.SelectedServices.FirstOrDefault(s => s.ServiceId == service.Id);
					if (selected == null)
					{
						<button type="button" class="btn btn-outline-primary mb-2 me-2 mt-3" @onclick="@(() => AddService(service))">Přidat: @service.Name</button>
					}
					else
					{
						<div class="border p-3 mb-2">
							<strong>@service.Name</strong><br />
							<label>Množství:</label>
							<input type="number" class="form-control"
							value="@selected.Quantity"
							@oninput="e => OnQuantityChanged(selected, e.Value?.ToString())" />



							<label>Cena za jednotku:</label>
							<div class="input-group">
								<input type="number" class="form-control"
								step="any"
								value="@selected.UnitPrice.ToString("0.##", CultureInfo.InvariantCulture)"
								@oninput="e => OnUnitPriceChanged(selected, e.Value?.ToString())" />
								<span class="input-group-text">@GetCurrencySymbol()</span>
							</div>





							<label>Poznámka:</label>
							<input type="text" class="form-control" @bind="selected.Note" />

							<button class="btn btn-danger mt-2" type="button" @onclick="@(() => RemoveService(service.Id))">Odebrat službu</button>
						</div>
					}
				}





				<div class="text-center mt-4">
					<button type="submit" class="btn btn-primary">@(reservationId == null ? "Vytvořit rezervaci" : "Uložit rezervaci")</button>
					<a href="/rezervace" class="btn btn-outline-secondary ml-2">Zpět na seznam</a>
				</div>
			</EditForm>
		</div>
	</div>
</div>


<AddCustomerModal IsVisible="@showAddCustomerModal"
OnClose="CloseAddCustomerModal"
OnCustomerAdded="OnCustomerAdded" />


<style>
	.calendar-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100vw;
	height: 100vh;
	background-color: rgba(0, 0, 0, 0.5);
	z-index: 2000;
	display: flex;
	justify-content: center;
	align-items: center;
	}

	.calendar-popup {
	background-color: white;
	padding: 20px;
	border-radius: 12px;
	box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
	}



</style>




@code {
	[Parameter]
	public int? reservationId { get; set; }
	[Parameter]
	public int? customerId { get; set; }
	[Parameter]
	public int? roomId { get; set; }

	private string? checkInText;
	private string? checkOutText;


	private ReservationFormViewModel reservation = new ReservationFormViewModel();
	private List<CustomerViewModel> customers = new();
	private List<CustomerViewModel> filteredCustomers = new();

	private List<RoomViewModel> rooms = new();
	private List<RoomViewModel> filteredRooms = new();
	private List<RoomViewModel> availableRooms = new();

	private string? searchCustomerTerm;
	private string? searchRoomTerm;
	private string? searchRoomTermByDate;
	private string? errorMessage;

	private List<MealPlanViewModel> mealPlans = new();
	private List<ReservationStatusViewModel> reservationStatuses = new();
	private RoomViewModel selectedRoom = new RoomViewModel();

	private ReservationMode mode = ReservationMode.ByDate;

	private DateTime currentMonth = DateTime.Now;
	private List<DateTime> disabledDates = new();
	private List<DateTime> unavailableDates = new List<DateTime>();

	int numberOfNights;
	private bool isCheckInCalendarVisible = false;
	private bool isCheckOutCalendarVisible = false;


	private bool isCheckInCalendarVisibleFromDateFirst = false;
	private bool isCheckOutCalendarVisibleFromDateFirst = false;

	private bool isGuestSearchVisible = false;
	private string? searchGuestTerm;
	private List<CustomerViewModel> filteredGuestCustomers = new();
	private List<CurrencyViewModel> currencies = new();

	private List<ServiceViewModel> allServices = new();



	private bool showAddCustomerModal = false;

	private void CloseAddCustomerModal(bool visible)
	{
		showAddCustomerModal = visible;
	}

	private void OnCustomerAdded(CustomerViewModel customer)
	{
		reservation.CustomerId = customer.Id;
		searchCustomerTerm = $"";

	}

	private void CloseCalendars()
	{
		isCheckInCalendarVisible = false;
		isCheckOutCalendarVisible = false;
	}

	private void AddService(ServiceViewModel service)
	{
		int numberOfNights = (int)(reservation.CheckOut - reservation.CheckIn).TotalDays;
		int numberOfGuests = reservation.Adults + reservation.Children;

		int quantity = service.IsPerNight
			? numberOfGuests * numberOfNights
			: 1; // nebo jiné pravidlo pro jednorázové služby

		var baseCurrency = currencies.FirstOrDefault(c => c.Code == "CZK");
		var currentCurrency = currencies.FirstOrDefault(c => c.Id == reservation.CurrencyId);

		var convertedPrice = baseCurrency != null && currentCurrency != null
			? service.Price * baseCurrency.Rate / currentCurrency.Rate
			: service.Price;

		reservation.SelectedServices.Add(new ServiceReservationViewModel
			{
				ServiceId = service.Id,
				Quantity = quantity,
				UnitPrice = convertedPrice,
				OriginalUnitPrice = service.Price,
				IsPerNight = service.IsPerNight
			});

		CalculateTotalPrice();
	}




	private void RemoveService(int serviceId)
	{
		var service = reservation.SelectedServices.FirstOrDefault(x => x.ServiceId == serviceId);
		if (service != null)
			reservation.SelectedServices.Remove(service);
		CalculateTotalPrice();

	}


	private string GetCurrencySymbol()
	{
		var currency = currencies.FirstOrDefault(c => c.Id == reservation.CurrencyId);
		return currency?.Symbol ?? "";
	}

	private void ShowAllRooms()
	{
		searchRoomTerm = string.Empty;
		filteredRooms = rooms
			.Where(x => x.IsDisable == false)
			.ToList();
	}







	private void ToggleSearchGuest()
	{
		isGuestSearchVisible = !isGuestSearchVisible;
		searchGuestTerm = "";
		filteredGuestCustomers.Clear();
	}

	protected override async Task OnInitializedAsync()
	{
		checkInText = reservation.CheckIn.ToShortDateString();
		checkOutText = reservation.CheckOut.ToShortDateString();

		reservation.CheckIn = DateTime.Now;
		reservation.CheckOut = DateTime.Now.AddDays(1);

		customers = await CustomerService.GetCustomersAsync();
		filteredCustomers = new List<CustomerViewModel>();

		rooms = await RoomService.GetRoomsAsync();
		filteredRooms = new List<RoomViewModel>();

		mealPlans = await MealPlanService.GetMealPlansAsync();
		reservationStatuses = await ReservationStatusService.GetReservationStatusesAsync();
		reservation.ReservationStatusId = reservationStatuses.FirstOrDefault(x => x.Name == "Potvrzená")?.Id ?? 0;
		reservation.MealPlanId = mealPlans.FirstOrDefault(x => x.Name == "Bez stravy")?.Id ?? 0;
		currencies = await CurrencyService.GetCurrenciesAsync();
		reservation.CurrencyId = currencies.FirstOrDefault(x => x.Code == "CZK")?.Id ?? 0;

		allServices = await ServiceService.GetAllAsync();


		if (reservationId != null)
		{
			reservation = Mapper.Map<ReservationFormViewModel>(await ReservationService.GetReservationByIdAsync(reservationId.Value));
			foreach (var service in reservation.SelectedServices)
			{
				service.OriginalUnitPrice = service.UnitPrice;
			}

			searchCustomerTerm = $"{reservation.CustomerName}";
			searchRoomTerm = $"{reservation.RoomTypeName} - {reservation.RoomNumber}";
			selectedRoom = rooms.FirstOrDefault(x => x.Id == reservation.RoomId);
			if (selectedRoom is null)
			{
				errorMessage = "Pokoj nebyl nalezen.";
				return;
			}
			reservation.RoomId = selectedRoom.Id;
			unavailableDates = await RoomService.GetUnavaibleDatesAsync(reservation.RoomId);



		}
		else if (customerId != null)
		{
			reservation.CustomerId = customerId.Value;
			var customer = await CustomerService.GetCustomerById(customerId.Value);
			searchCustomerTerm = $"{customer.FirstName} {customer.LastName}";
		}
		else if (roomId != null)
		{
			reservation.RoomId = roomId.Value;
			var room = Mapper.Map<RoomViewModel>(await RoomService.GetRoomByIdAsync(roomId.Value));
			searchRoomTerm = $"{room.RoomTypeName} - {room.RoomNumber}";
			selectedRoom = room;
			unavailableDates = await RoomService.GetUnavaibleDatesAsync(roomId.Value);
		}

	}

	private void ValidateCheckInText(ChangeEventArgs e)
	{
		checkInText = e.Value?.ToString() ?? "";
		if (DateTime.TryParse(checkInText, out var date))
		{
			reservation.CheckIn = date;
			CalculateTotalPrice();
		}
		else
		{
			checkInText = reservation.CheckIn.ToShortDateString();
		}
	}

	private void ValidateCheckOutText(ChangeEventArgs e)
	{
		checkOutText = e.Value?.ToString() ?? "";
		if (DateTime.TryParse(checkOutText, out var date))
		{
			reservation.CheckOut = date;
			CalculateTotalPrice();
		}
		else
		{
			checkOutText = reservation.CheckOut.ToShortDateString();
		}
	}




	private void FilterGuestCustomers()
	{
		var term = searchGuestTerm?.ToLower();

		filteredGuestCustomers = customers
			.Where(x =>
				x.FirstName.Contains(term, StringComparison.OrdinalIgnoreCase) ||
				x.LastName.Contains(term, StringComparison.OrdinalIgnoreCase) ||
				x.Email.Contains(term, StringComparison.OrdinalIgnoreCase) ||
				x.DocumentNumber.Contains(term, StringComparison.OrdinalIgnoreCase))
			.ToList();
	}

	private void AddExistingGuest(CustomerViewModel customer)
	{
		reservation.Guests.Add(new CustomerFormViewModel
			{
				Id = customer.Id,
				FirstName = customer.FirstName,
				LastName = customer.LastName,
				Email = customer.Email,
				Phone = customer.Phone,
				DocumentNumber = customer.DocumentNumber,
				DateOfIssue = customer.DateOfIssue,
				DateOfExpiry = customer.DateOfExpiry,
				PlaceOfBirth = customer.PlaceOfBirth,
				PersonalIdentificationNumber = customer.PersonalIdentificationNumber,
				PostalCode = customer.PostalCode,
				Country = customer.Country,
				City = customer.City,
				Nationality = customer.Nationality,
				Address = customer.Address,
				DateOfBirth = customer.DateOfBirth

			});

		isGuestSearchVisible = false;
		searchGuestTerm = "";
		filteredGuestCustomers.Clear();
	}

	private void OnCurrencyChanged(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int selectedCurrencyId))
		{
			if (selectedCurrencyId != reservation.CurrencyId)
			{
				var oldCurrency = currencies.FirstOrDefault(c => c.Id == reservation.CurrencyId);
				var newCurrency = currencies.FirstOrDefault(c => c.Id == selectedCurrencyId);

				if (oldCurrency != null && newCurrency != null)
				{
					// Přepočítej všechny služby na základě jejich původní ceny (v CZK)
					foreach (var service in reservation.SelectedServices)
					{
						service.UnitPrice = service.OriginalUnitPrice / newCurrency.Rate;
					}

					// Aktualizuj měnu
					reservation.CurrencyId = selectedCurrencyId;

					// Spočítej znovu celkovou cenu (pokoj + strava + služby)
					CalculateTotalPrice();
				}
			}
		}
	}




	private void OnQuantityChanged(ServiceReservationViewModel service, string? newValue)
	{
		if (int.TryParse(newValue, out int qty))
		{
			service.Quantity = qty;
			CalculateTotalPrice();
		}
	}

	private void OnUnitPriceChanged(ServiceReservationViewModel service, string? newValue)
	{
		if (decimal.TryParse(newValue, out decimal price))
		{
			service.UnitPrice = price;
			CalculateTotalPrice();
		}
	}




	private void SwitchMode(ReservationMode mode)
	{
		this.mode = mode;
	}

	private void OpenCheckInCalendar()
	{
		isCheckInCalendarVisible = !isCheckInCalendarVisible;
	}

	private void OpenCheckOutCalendar()
	{
		isCheckOutCalendarVisible = !isCheckOutCalendarVisible;
	}

	private void OpenCheckInCalendarFromDateFirst()
	{
		isCheckInCalendarVisibleFromDateFirst = !isCheckInCalendarVisibleFromDateFirst;
	}

	private void OpenCheckOutCalendarFromDateFirst()
	{
		isCheckOutCalendarVisibleFromDateFirst = !isCheckOutCalendarVisibleFromDateFirst;
	}

	private void SelectCustomer(CustomerViewModel customer)
	{
		reservation.CustomerId = customer.Id;
		searchCustomerTerm = $"{customer.FirstName} {customer.LastName}";
		filteredCustomers = new List<CustomerViewModel>();
	}

	private async void SelectRoom(RoomViewModel room)
	{
		reservation.RoomId = room.Id;
		searchRoomTerm = $"{room.RoomTypeName} - {room.RoomNumber}";
		filteredRooms.Clear();

		selectedRoom = room;
		await OnRoomSelected();
		CalculateTotalPrice();
		StateHasChanged();      // vynutí rerender stránky

	}

	private void SelectRoomByRoom(RoomViewModel room)
	{
		selectedRoom = room;
		reservation.RoomId = room.Id;
		searchRoomTerm = $"{room.RoomNumber}";
		filteredRooms.Clear();
		CalculateTotalPrice();

	}

	private void CalculateTotalPrice()
	{
		if (selectedRoom == null || reservation.CheckIn >= reservation.CheckOut)
		{
			reservation.TotalPrice = 0;
			return;
		}

		numberOfNights = (int)(reservation.CheckOut - reservation.CheckIn).TotalDays;

		var baseCurrency = currencies.FirstOrDefault(c => c.Code == "CZK");
		var targetCurrency = currencies.FirstOrDefault(c => c.Id == reservation.CurrencyId);
		if (baseCurrency == null || targetCurrency == null)
			return;

		reservation.TotalPrice = 0;

		// Přepočet ceny pokoje
		var roomPrice = selectedRoom.Price * baseCurrency.Rate / targetCurrency.Rate;
		reservation.TotalPrice += roomPrice * numberOfNights;

		// Přepočet ceny stravování
		if (reservation.MealPlanId != 0)
		{
			var mealPlan = mealPlans.FirstOrDefault(x => x.Id == reservation.MealPlanId);
			if (mealPlan != null)
			{
				var mealPrice = mealPlan.Price * baseCurrency.Rate / targetCurrency.Rate;
				reservation.MealPlanConvertedPrice = mealPrice;
				reservation.TotalPrice += mealPrice * numberOfNights;
			}
		}

		// Přepočet služeb
		if (reservation.SelectedServices != null && reservation.SelectedServices.Any())
		{
			foreach (var service in reservation.SelectedServices)
			{
				reservation.TotalPrice += service.UnitPrice * service.Quantity;
			}
		}
	}


	private void OnAdultsSelect(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int adults))
		{
			reservation.Adults = adults;
		}
		CalculateTotalPrice();
	}

	private void OnChildrenSelect(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int children))
		{
			reservation.Children = children;
		}
		CalculateTotalPrice();
	}

	private void OnMealSelect(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int selectedMealPlanId))
		{
			reservation.MealPlanId = selectedMealPlanId;

			var selectedMeal = mealPlans.FirstOrDefault(x => x.Id == selectedMealPlanId);
			if (selectedMeal != null)
			{
				reservation.OriginalMealPlanPrice = selectedMeal.Price;

				var currency = currencies.FirstOrDefault(c => c.Id == reservation.CurrencyId);
				if (currency != null)
				{
					reservation.MealPlanConvertedPrice = selectedMeal.Price * currency.Rate;
				}
			}
		}

		CalculateTotalPrice();
	}



	private void OnDateSelectIn(DateTime? date)
	{
		if (date.HasValue)
		{
			reservation.CheckIn = date.Value;
		}
		isCheckInCalendarVisible = false;
		isCheckInCalendarVisibleFromDateFirst = false;
		CalculateTotalPrice();
	}

	private void OnDateSelectOut(DateTime? date)
	{
		if (date.HasValue)
		{
			reservation.CheckOut = date.Value;
			checkOutText = date.Value.ToShortDateString();
			CalculateTotalPrice();
		}
		isCheckOutCalendarVisible = false;
		isCheckOutCalendarVisibleFromDateFirst = false;
	}


	private async Task LoadAvailableRooms()
	{
		if (reservation.CheckIn >= reservation.CheckOut)
		{
			availableRooms = new List<RoomViewModel>();
			return;
		}
		availableRooms = await RoomService.GetAvailableRoomsAsync(reservation.CheckIn, reservation.CheckOut);
		availableRooms = availableRooms.Where(x => x.IsDisable == false).ToList();

	}




	private async Task OnRoomSelected()
	{
		if (selectedRoom == null)
		{
			reservation.RoomId = 0;
			unavailableDates.Clear();
			return;
		}

		reservation.RoomId = selectedRoom.Id;
		unavailableDates = await RoomService.GetUnavaibleDatesAsync(selectedRoom.Id);
		CalculateTotalPrice();
	}


	private async Task HandleValidSubmit()
	{
		try {
			if (reservationId == null)
			{
				await ReservationService.CreateReservationAsync(reservation);
			}
			else
			{
				await ReservationService.UpdateReservationAsync(reservation);
			}

			NavigationManager.NavigateTo("/rezervace");
		}
		catch (DbUpdateException)
		{
			errorMessage = "Chyba při ukládání rezervace. Zkontrolujte, zda jsou všechna pole vyplněna správně.";
		}
		catch (Exception ex)
		{
			errorMessage = "Nastala chyba při ukládání rezervace. Zkuste to prosím znovu. : " + ex.Message;
		}
		finally
		{
			StateHasChanged();
		}


	}



	private void AddGuest()
	{
		reservation.Guests.Add(new CustomerFormViewModel());
	}

	private void FilterCustomers()
	{
		var term = searchCustomerTerm ?? string.Empty;

		filteredCustomers = customers.Where(x => x.FirstName.Contains(term, StringComparison.OrdinalIgnoreCase) || x.LastName.Contains(term, StringComparison.OrdinalIgnoreCase) || x.Email.Contains(term, StringComparison.OrdinalIgnoreCase) || x.Phone.Contains(term, StringComparison.OrdinalIgnoreCase) || x.DocumentNumber.Contains(term, StringComparison.OrdinalIgnoreCase)).ToList();
	}

	private void HideCustomerList()
	{
		filteredCustomers.Clear();
	}

	private void FilterRooms()
	{
		var term = searchRoomTerm ?? string.Empty;

		filteredRooms = rooms
			.Where(x => x.IsDisable == false &&
						(string.IsNullOrEmpty(term) ||
							x.RoomNumber.Contains(term, StringComparison.OrdinalIgnoreCase) ||
							x.RoomTypeName.Contains(term, StringComparison.OrdinalIgnoreCase) ||
							x.Price.ToString().Contains(term, StringComparison.OrdinalIgnoreCase) ||
							x.MaxAdults.ToString().Contains(term, StringComparison.OrdinalIgnoreCase) ||
							x.MaxChildren.ToString().Contains(term, StringComparison.OrdinalIgnoreCase)))
			.ToList();
	}



	private void FilterRoomsByDate()
	{

		if (availableRooms.Any())
		{
			var term = searchRoomTermByDate ?? string.Empty;

			availableRooms = availableRooms
				.Where(x => x.IsDisable == false &&
							x.RoomNumber.Contains(term, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}
		else
		{
			availableRooms = new List<RoomViewModel>();
		}
	}

	private void HideRoomList()
	{
		filteredRooms.Clear();
		availableRooms.Clear();
	}

	private enum ReservationMode
	{
		ByDate,
		ByRoom
	}

}