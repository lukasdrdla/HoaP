@page "/platby"
@using HoaP.Application.ViewModels.Payment
@inject PaymentService PaymentService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container mt-5" @onmousedown="HideOptions">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="text-center mb-4 page-title">Platby</h3>
            <div class="input-group mb-4">
                <input type="text" class="form-control" placeholder="Hledat..." @oninput="SearchPayments" />
                <button class="btn btn-outline-secondary" type="button">Hledat</button>
            </div>
            <div class="d-flex justify-content-between mb-3">
                <div></div> <!-- Placeholder for alignment -->
                <button class="btn btn-primary" @onclick="NavigateToAddPayment">
                    <i class="bi bi-plus"></i> Přidat platbu
                </button>
            </div>

            <div class="table-responsive">
                <table class="w-100">
                    <QuickGrid Items="filteredPayments.AsQueryable()" Pagination="paginationState" Class="w-100">
                        <PropertyColumn Title="ID platby" Property="@(x => x.Id)" Sortable="true" />
                        <PropertyColumn Title="ID faktury" Property="@(x => x.InvoiceNumber)" Sortable="true" />
						<TemplateColumn Title="Částka">
							<div>
								@if (context.CurrencySymbol != null)
								{
									@($"{context.TotalAmount:0.00} {context.CurrencySymbol}")
								}
								else
								{
									@($"{context.TotalAmount:0.00}")
								}
						    </div>
						</TemplateColumn>
                        <PropertyColumn Title="Metoda" Property="@(x => x.PaymentMethodName)" Sortable="true" />
						<PropertyColumn Title="Zákazník" Property="@(x => x.CustomerName ?? "Neznámý zákazník")" Sortable="true" />
                        <PropertyColumn Title="Datum" Property="@(x => x.PaymentDate.ToShortDateString())" Sortable="true" />
                        <TemplateColumn Title="Akce">
                            <div class="d-inline-flex">
                                <button class="btn text-primary" @onclick="() => NavigateToPaymentDetail(context.Id)">
                                    <i class="bi bi-search"></i>
                                </button>

                                <button class="btn text-muted" @onclick="() => ToggleOptions(context.Id)">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>

                                @if (VisiblePaymentId == context.Id)
                                {
                                    <div class="options-menu" @ref="optionsMenu">
                                        <button class="dropdown-item" @onmousedown="() => OpenDeleteConfirmation(context.Id)">Smazat</button>
										<button class="dropdown-item" @onmousedown="() => NavigateToUpdatePayment(context.Id)">Upravit</button>
                                    </div>
                                }
                            </div>
                        </TemplateColumn>
                    </QuickGrid>
                    <Paginator State="paginationState" />
                </table>
            </div>
        </div>
    </div>
</div>

<DeleteModal Title="Smazání platby" ActionType="DeletePayment" IsVisible="@isDeleteModalVisible" OnClose="HandleModalClose" />

@code {
    private List<PaymentViewModel> payments;
    private List<PaymentViewModel> filteredPayments = new List<PaymentViewModel>();
    private string? searchTerm;

    private bool isDeleteModalVisible = false;


	private Guid deletePaymentId;
    private Guid VisiblePaymentId { get; set; }
    private ElementReference optionsMenu;

    private PaginationState paginationState = new PaginationState() { ItemsPerPage = 20 };

    private void OpenDeleteConfirmation(Guid paymentId)
    {

        isDeleteModalVisible = true;
		deletePaymentId = paymentId;
    }

    private async Task HandleModalClose(bool result)
    {
		var payment = payments.FirstOrDefault(p => p.Id == deletePaymentId);
		if (result && payment != null)
		{
			await PaymentService.DeletePaymentAsync(payment.Id);
			payments.Remove(payment);
			filteredPayments = payments;
		}
		isDeleteModalVisible = false;
    }

    private void ToggleOptions(Guid paymentId)
    {
		VisiblePaymentId = VisiblePaymentId == paymentId ? Guid.Empty : paymentId;
    }

    private void SearchPayments(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPayments = payments.Where(
                p => p.Id.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                  || p.InvoiceNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                  || p.TotalAmount.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                  || p.PaymentMethodName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                  || p.PaymentDate.ToShortDateString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        else
        {
            filteredPayments = payments;
        }
    }

    private void HideOptions(MouseEventArgs e)
    {
        if (VisiblePaymentId != Guid.Empty && optionsMenu.Context != null)
        {
			VisiblePaymentId = Guid.Empty;

        }
    }

    protected override async Task OnInitializedAsync()
    {
        payments = await PaymentService.GetPaymentsAsync() ?? new List<PaymentViewModel>();
        filteredPayments = payments;
    }

    private void NavigateToPaymentDetail(Guid id)
    {
        NavigationManager.NavigateTo($"/platba/{id}");
    }

    private void NavigateToAddPayment()
    {
		NavigationManager.NavigateTo("/vytvorit-platbu");
    }

	private void NavigateToUpdatePayment(Guid id)
	{
		NavigationManager.NavigateTo($"/spravovat-platbu/{id}");
    }
}
