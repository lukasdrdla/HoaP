@page "/faktura/{invoiceId:int}"
@using HoaP.Application.ViewModels.Invoice
@inject InvoiceService InvoiceService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="alert alert-danger">@ErrorMessage</p>
}

<div class="invoice-detail-container mt-5">

    <div class="invoice-header">
        <h2>Faktura #@invoice.Id <span style="color: red;">@(invoice.IsCanceled ? "(STORNOVÁNO)" : "")</span></h2>
        <div class="d-flex gap-2 justify-content-end align-items-center">
			<a href="/spravovat-fakturu/@InvoiceId" class="btn btn-outline-primary">Upravit</a>
            <button class="btn btn-outline-primary" @onclick="DownloadPDF">Stáhnout fakturu</button>
            <button class="btn btn-primary" @onclick="NavigateToPayment">Přidat platbu</button>
			<button class="btn btn-danger" @onclick="() => DeleteInvoice(invoice.Id)">Odstranit fakturu</button>
        </div>
    </div>

    <div class="invoice-summary">
        <div class="summary-item">
            <span class="label">Číslo faktury:</span>
            <span class="value">#@invoice.Id</span>
        </div>
        <div class="summary-item">
            <span class="label">Zákazník:</span>
			<span class="value">@(invoice.CustomerName ?? "Neznámý zákazník")</span>
        </div>
        <div class="summary-item">
            <span class="label">Datum vystavení:</span>
            <span class="value">@invoice.IssueDate.ToShortDateString()</span>
        </div>
        <div class="summary-item">
            <span class="label">Datum splatnosti:</span>
            <span class="value">@invoice.DueDate.ToShortDateString()</span>
        </div>
        <div class="summary-item">
            <span class="label">Celková částka:</span>
            <span class="value">@invoice.Price.ToString("C")</span>
        </div>
        <div class="summary-item">
            <span class="label">Stav:</span>
            <span class="value
                @(invoice.IsCanceled ? "status-canceled" : invoice.IsPaid ? "status-paid" : "status-unpaid")">
                @(invoice.IsCanceled ? "Stornováno" : invoice.IsPaid ? "Zaplaceno" : "Nezaplaceno")
            </span>
        </div>
        <div class="summary-item">
            <span class="label">Sleva:</span>
            <span class="value">@invoice.Discount.ToString("C")</span>
        </div>
        <div class="summary-item">
            <span class="label">Předplatba:</span>
            <span class="value">@invoice.Prepayment.ToString("C")</span>
        </div>
        <div class="summary-footer">
            <span class="footer-label">Vystavil:</span>
            <span class="footer-value">@invoice.CreatedBy</span>
        </div>
    </div>

    <div class="d-flex gap-3">
		<button class="btn btn-danger flex-grow-1" @onclick="() => CancleInvoice(invoice.Id)">Stornovat fakturu</button>
        <button class="btn btn-outline-secondary flex-grow-1" @onclick="NavigateToInvoices">Zpět na seznam rezervací</button>
    </div>
</div>


@code{
	[Parameter]
	public int InvoiceId { get; set; }

    private DetailInvoiceViewModel invoice = new DetailInvoiceViewModel();
	private string ErrorMessage = string.Empty;



	protected override async Task OnInitializedAsync()
	{
		invoice = await InvoiceService.GetInvoiceByIdAsync(InvoiceId);
	}

	private async Task CancleInvoice(int invoiceId)
	{
		var result = await JSRuntime.InvokeAsync<bool>("confirm", "Opravdu chcete stornovat fakturu?");
		if (result)
		{
			try 
            {
                await InvoiceService.CancelInvoiceAsync(invoiceId);
                NavigationManager.NavigateTo("/faktury");
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
		}
	}

	private async Task DeleteInvoice(int invoiceId)
    {
		var result = await JSRuntime.InvokeAsync<bool>("confirm", "Opravdu chcete smazat fakturu?");
		if (result)
		{
			try
			{
				await InvoiceService.DeleteInvoiceAsync(invoiceId);
				NavigationManager.NavigateTo("/faktury");
			}
			catch (Exception ex)
			{
				ErrorMessage = ex.Message;
			}
		}
	}




    private async Task DownloadPDF()
    {
        var pdfData = new InvoicePdfGenerator().GeneratePdf(invoice);
        var fileName = $"Faktura_{invoice.Id}.pdf";

        using var stream = new MemoryStream(pdfData);
        using var streamRef = new DotNetStreamReference(stream: stream);
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

	private void NavigateToInvoices()
	{
		NavigationManager.NavigateTo("/faktury");
	}

	private void NavigateToPayment()
	{
        NavigationManager.NavigateTo($"/vytvorit-platbu/{invoice.Id}");
	}


}

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);

        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName || 'download.pdf';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    };
</script>