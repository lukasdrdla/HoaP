@page "/spravovat-fakturu/{invoiceId:int?}"
@using HoaP.Application.ViewModels.Currency
@using HoaP.Application.ViewModels.Invoice
@inject InvoiceService InvoiceService
@inject NavigationManager NavigationManager
@inject CustomerService CustomerService
@inject ReservationService ReservationService
@inject IMapper Mapper
@inject CurrencyService CurrencyService
@rendermode InteractiveServer

<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
			<h3 class="card-title text-center mb-4 page-title">@(invoiceId == null ? "Vytvořit fakturu" : "Upravit fakturu")</h3>
            <EditForm Model="invoice" OnValidSubmit="HandleValidSubmit" FormName="AddInvoice">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="customerSearch" class="form-label">Rezervace</label>
                    <div class="form-group position-relative">

                        <input type="text" class="form-control" placeholder="Hledat rezervaci" @bind="searchTerm" @oninput="SearchReservation" @onblur="HideReservationList" />
                        @if (filteredReservations.Any())
                        {
                            <ul class="list-group mt-1" style="max-height: 200px; overflow-y: auto; position: absolute; top: 100%; left: 0; right: 0; z-index: 1000;">
                                @foreach (var reservation in filteredReservations)
                                {
                                    <li class="list-group-item list-group-item-action" @onmousedown="() => SelectCustomer(reservation)">
                                        <div>
                                            <strong>Rezervace:</strong> č. @reservation.Id
                                        </div>
                                        <div>
                                            <strong>Termín:</strong> @reservation.CheckIn.ToShortDateString() - @reservation.CheckOut.ToShortDateString()
                                        </div>
                                        <div>
                                            <strong>Pokoj:</strong> @reservation.RoomNumber
                                        </div>
                                        <div>
                                            <strong>Zákazník:</strong> @reservation.CustomerName
                                        </div>

                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="issueDate" class="form-label">Datum vystavení</label>
                        <InputDate id="issueDate" class="form-control" @bind-Value="invoice.IssueDate" />
                    </div>

                    <div class="col-md-6">
                        <label for="dueDate" class="form-label">Datum splatnosti</label>
                        <InputDate id="dueDate" class="form-control" @bind-Value="invoice.DueDate" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-3">
                        <label for="discount" class="form-label">Sleva (%)</label>
                        <input type="number" id="discount" class="form-control" @bind="invoice.Discount" @bind:event="oninput" @bind:after="CalculatePrice" />
                    </div>

                    <div class="col-md-3">
                        <div class="form-group mb-3">
							<label for="Currency" class="form-label">Měna</label>
							<InputSelect id="Currency" class="form-control" @bind-Value="invoice.CurrencyId">
								<option value="">Vyberte měnu</option>
								@foreach (var currency in currencies)
								{
									<option value="@currency.Id">@currency.Name</option>
								}
							</InputSelect>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <label for="prepayment" class="form-label">Záloha</label>
                        <input type="number" id="prepayment" class="form-control" @bind="invoice.Prepayment" @bind:event="oninput" @bind:after="CalculatePrice" />
                    </div>
                    <div class="col-md-3">
                        <label for="price" class="form-label">Cena</label>
                        <InputNumber id="price" class="form-control" @bind-Value="invoice.Price" />
                    </div>
                </div>



                <div class="mb-3">
                    <label for="description" class="form-label">Popis</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="invoice.Description" />
                </div>

                <div class="text-center mt-4">
					<button type="submit" class="btn btn-primary">@(invoiceId == null ? "Vytvořit fakturu" : "Uložit fakturu")</button>
                    <a href="/faktury" class="btn btn-outline-secondary">Zpět na seznam</a>
                </div>
            </EditForm>

        </div>
    </div>

</div>

@code {

	[Parameter]
	public int? invoiceId { get; set; }

    private InvoiceFormViewModel invoice { get; set; } = new InvoiceFormViewModel();

    private List<ReservationViewModel> reservations { get; set; } = new List<ReservationViewModel>();
    private List<ReservationViewModel> filteredReservations { get; set; } = new List<ReservationViewModel>();
	private List<CurrencyViewModel> currencies { get; set; } = new List<CurrencyViewModel>();
    private string? searchTerm { get; set; }
    private decimal OriginalPrice { get; set; }


    protected override async Task OnInitializedAsync()
    {
		if (invoiceId != null)
		{
			invoice = Mapper.Map<InvoiceFormViewModel>(await InvoiceService.GetInvoiceByIdAsync(invoiceId.Value));
			OriginalPrice = invoice.Price;
            
            var reservation = await ReservationService.GetReservationByIdAsync(invoice.ReservationId);
			searchTerm = $"{reservation.CustomerName} - {reservation.CheckIn.ToShortDateString()} až {reservation.CheckOut.ToShortDateString()} - Pokoj: {reservation.RoomNumber}";
            currencies = await CurrencyService.GetCurrenciesAsync();


		}

        reservations = await ReservationService.GetReservationsAsync();
        filteredReservations = new List<ReservationViewModel>();

        currencies = await CurrencyService.GetCurrenciesAsync();
    }


    private async Task HandleValidSubmit()
    {
		if (invoiceId == null)
		{
			await InvoiceService.CreateInvoiceAsync(invoice);
		}
		else
		{
			await InvoiceService.UpdateInvoiceAsync(invoice);
		}
        
        NavigationManager.NavigateTo("/faktury");
    }

    private async Task SearchReservation(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
		filteredReservations = reservations.Where(r => r.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    }

    private async void HideReservationList()
    {
        filteredReservations.Clear();
    }


    private void SelectCustomer(ReservationViewModel reservation)
    {
        invoice.ReservationId = reservation.Id;
        invoice.Price = reservation.TotalPrice;
        OriginalPrice = reservation.TotalPrice;
        searchTerm = $"{reservation.CustomerName} - {reservation.CheckIn.ToShortDateString()} až {reservation.CheckOut.ToShortDateString()} - Pokoj: {reservation.RoomNumber}";
        filteredReservations.Clear();

    }

    

    private void CalculatePrice()
    {
        if (OriginalPrice > 0 && invoice.Discount >= 0 && invoice.Prepayment >= 0)
        {
            var discountedPrice = OriginalPrice - (OriginalPrice * invoice.Discount / 100);
            invoice.Price = discountedPrice - invoice.Prepayment;
            if (invoice.Price < 0)
            {
                invoice.Price = 0;
            }
        }
    }

    

    

}