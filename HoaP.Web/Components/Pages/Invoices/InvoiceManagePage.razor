@page "/spravovat-fakturu/{invoiceId:int}"
@page "/vytvorit-fakturu"
@page "/vytvorit-fakturu/rezervace/{reservationId:int}"
@using HoaP.Application.ViewModels.Currency
@using HoaP.Application.ViewModels.Invoice
@using HoaP.Application.ViewModels.Payment
@using System.Security.Claims
@inject InvoiceService InvoiceService
@inject NavigationManager NavigationManager
@inject CustomerService CustomerService
@inject ReservationService ReservationService
@inject IMapper Mapper
@inject CurrencyService CurrencyService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize]

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Chyba:</strong> @errorMessage
    </div>
}

<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="card-title text-center mb-4 page-title">@(invoiceId == null ? "Vytvořit fakturu" : "Upravit fakturu")</h3>
            <EditForm Model="invoice" OnValidSubmit="HandleValidSubmit" FormName="AddInvoice">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="customerSearch" class="form-label">Rezervace</label>
                    <div class="form-group position-relative">

						<input type="text" class="form-control" placeholder="Hledat rezervaci" @bind="searchTerm" @oninput="SearchReservation" />
                        @if (filteredReservations.Any())
                        {
                            <ul class="list-group mt-1" style="max-height: 200px; overflow-y: auto; position: absolute; top: 100%; left: 0; right: 0; z-index: 1000;">
                                @foreach (var reservation in filteredReservations)
                                {
                                    <li class="list-group-item">
                                        <input type="checkbox"
                                        checked="@invoice.ReservationIds.Contains(reservation.Id)"
                                        @onchange="@(() => ToggleReservationSelection(reservation))" />



                                        <strong>Rezervace:</strong> č. @reservation.Id –
                                        @reservation.CustomerName, @reservation.CheckIn.ToShortDateString() - @reservation.CheckOut.ToShortDateString()
                                    </li>

                                }

                            </ul>
                        }
                    </div>
                </div>

                @if (invoice.Reservations.Any())
                {
                    <div class="mt-3">
                        <h5>Vybrané rezervace:</h5>
                        <ul class="list-group">
                            @foreach (var selected in invoice.Reservations)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>Rezervace:</strong> č. @selected.Id —
                                        <strong>@selected.CustomerName</strong>,
                                        @selected.CheckIn.ToShortDateString() až @selected.CheckOut.ToShortDateString()
                                        (@selected.RoomNumber)
                                    </div>
                                    <button class="btn btn-sm btn-danger" type="button"
                                    @onclick="() => ToggleReservationSelection(selected)">
                                        Odebrat
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                }


                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="issueDate" class="form-label">Datum vystavení</label>
                        <InputDate id="issueDate" class="form-control" @bind-Value="invoice.IssueDate" />
						<ValidationMessage For="@(() => invoice.IssueDate)" />
                    </div>

                    <div class="col-md-6">
                        <label for="dueDate" class="form-label">Datum splatnosti</label>
                        <InputDate id="dueDate" class="form-control" @bind-Value="invoice.DueDate" />
						<ValidationMessage For="@(() => invoice.DueDate)" />
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-3">
                        <label for="discount" class="form-label">Sleva (%)</label>
                        <input type="number" min="0" id="discount" class="form-control" @bind="invoice.Discount" @bind:event="oninput" @bind:after="RecalculatePrice" />
                    </div>

                    <div class="col-md-3">
                        <div class="form-group mb-3">
                            <label for="Currency" class="form-label">Měna</label>
                            <select class="form-select"
                                    @bind="invoice.CurrencyId"
                                    @bind:event="onchange"
                                    @bind:after="OnCurrencyChanged">
                                @foreach (var currency in currencies)
                                {
                                    <option value="@currency.Id">
                                        @currency.Name (@currency.Symbol)
                                    </option>
                                }
                            </select>




                        </div>
                    </div>

                    <div class="col-md-3">
                        <label for="prepayment" class="form-label">Záloha</label>
                        <input type="number" min="0" id="prepayment" class="form-control" @bind="invoice.Prepayment" @bind:event="oninput" @bind:after="RecalculatePrice" />
                    </div>
                    <div class="col-md-3">
                        <label for="price" class="form-label">Cena</label>
                        <div class="input-group">
                            <InputNumber min="0" id="price" class="form-control" @bind-Value="invoice.Price" />
                            <span class="input-group-text">
                                @(currencies.FirstOrDefault(c => c.Id == invoice.CurrencyId)?.Symbol ?? "")
                            </span>
							<ValidationMessage For="@(() => invoice.Price)" />
                        </div>
                    </div>


                </div>



                <div class="mb-3">
                    <label for="description" class="form-label">Popis</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="invoice.Description" />
					<ValidationMessage For="@(() => invoice.Description)" />
                </div>

                

                <h5>Dodatečné položky</h5>
                @foreach (var item in invoice.Items)
                {
                    <div class="mb-3 border p-2">
                        <label>Popis</label>
                        <InputText class="form-control" @bind-Value="item.Description" />
                        <label>Cena</label>
                        <div class="input-group">
                            <InputNumber class="form-control" @bind-Value="item.Price" />
                            <span class="input-group-text">
                                @(currencies.FirstOrDefault(c => c.Id == invoice.CurrencyId)?.Symbol ?? "")
                            </span>
                        </div>
                        <button type="button" class="btn btn-danger mt-1" @onclick="@(() => RemoveItem(item))">Odebrat</button>
                    </div>
                }
                <button type="button" class="btn btn-outline-primary mt-2" @onclick="AddItem">+ Přidat položku</button>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary">@(invoiceId == null ? "Vytvořit fakturu" : "Uložit fakturu")</button>
                    <a href="/faktury" class="btn btn-outline-secondary">Zpět na seznam</a>
                </div>

            </EditForm>

        </div>
    </div>

</div>

@code {

    [Parameter]
    public int? invoiceId { get; set; }
    [Parameter]
    public int? reservationId { get; set; }

    private InvoiceFormViewModel invoice { get; set; } = new InvoiceFormViewModel();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }


    private List<ReservationViewModel> reservations { get; set; } = new List<ReservationViewModel>();
    private List<ReservationViewModel> filteredReservations { get; set; } = new List<ReservationViewModel>();
    private List<CurrencyViewModel> currencies { get; set; } = new List<CurrencyViewModel>();
    private string? searchTerm { get; set; }
    private decimal OriginalPrice { get; set; }
    private int? lastCurrencyId;


    private string? errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        lastCurrencyId = invoice.CurrencyId;
        currencies = await CurrencyService.GetCurrenciesAsync();

        if (invoiceId != null)
        {

            var invoiceEntity = await InvoiceService.GetInvoiceEntityByIdAsync(invoiceId.Value);
            invoice = Mapper.Map<InvoiceFormViewModel>(invoiceEntity);
            OriginalPrice = invoice.Price;

            if (!currencies.Any(c => c.Id == invoice.CurrencyId))
            {
                invoice.CurrencyId = currencies.FirstOrDefault(c => c.Code == "CZK")?.Id ?? currencies.First().Id;
            }
        }

        else if (reservationId != null)
        {
            var allReservations = await ReservationService.GetReservationsAsync();
            var reservation = allReservations.FirstOrDefault(r => r.Id == reservationId.Value);

            if (reservation is not null)
            {
                if (!invoice.ReservationIds.Contains(reservation.Id))
                {
                    invoice.ReservationIds.Add(reservation.Id);
                }

                if (!invoice.Reservations.Any(r => r.Id == reservation.Id))
                {
                    invoice.Reservations.Add(reservation);
                }

                invoice.Price = reservation.TotalPrice;
                OriginalPrice = reservation.TotalPrice;

                searchTerm = !string.IsNullOrEmpty(reservation.CustomerName)
                    ? $"{reservation.CustomerName} – {reservation.CheckIn:dd.MM.yyyy} až {reservation.CheckOut:dd.MM.yyyy} – Pokoj: {reservation.RoomNumber}"
                    : $"Rezervace č. {reservation.Id} – {reservation.CheckIn:dd.MM.yyyy} až {reservation.CheckOut:dd.MM.yyyy} – Pokoj: {reservation.RoomNumber}";
            }

        }

        reservations = await ReservationService.GetReservationsAsync();
        filteredReservations = new List<ReservationViewModel>();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                invoice.UserId = userId;
            }
            else
            {
                errorMessage = "Nepodařilo se zjistit ID uživatele.";
                return;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
            return;
        }



        if (invoice.CurrencyId == 0 || !currencies.Any(c => c.Id == invoice.CurrencyId))
        {
            invoice.CurrencyId = currencies.FirstOrDefault(c => c.Code == "CZK")?.Id ?? currencies.First().Id;
        }


    }

    private void ToggleReservationSelection(ReservationViewModel reservation)
    {
        if (invoice.ReservationIds.Contains(reservation.Id))
        {
            invoice.ReservationIds.Remove(reservation.Id);
            invoice.Reservations.RemoveAll(r => r.Id == reservation.Id);
        }
        else
        {
            if (invoice.Reservations.Count > 0)
            {
                var referenceCurrency = invoice.Reservations.First().CurrencySymbol;
                if (reservation.CurrencySymbol != referenceCurrency)
                {
                    errorMessage = $"Nelze přidat rezervaci v jiné měně ({reservation.CurrencySymbol}) než již přidané ({referenceCurrency}).";
                    return;
                }
            }

            invoice.ReservationIds.Add(reservation.Id);
            invoice.Reservations.Add(reservation);

            if (invoice.Reservations.Count == 1)
            {
                invoice.CurrencyId = currencies.FirstOrDefault(c => c.Symbol == reservation.CurrencySymbol)?.Id ?? invoice.CurrencyId;
            }
        }

        searchTerm = string.Empty;
        filteredReservations.Clear();

        UpdateOriginalPrice();
        RecalculatePrice();
    }

    private void UpdateOriginalPrice()
    {
        OriginalPrice = invoice.Reservations.Sum(r => r.TotalPrice);

    }


    private void AddItem()
    {
        invoice.Items.Add(new InvoiceItemViewModel());
    }

    private void RemoveItem(InvoiceItemViewModel item)
    {
        invoice.Items.Remove(item);
        RecalculatePrice();
    }




    private async Task HandleValidSubmit()
    {
		try {

            if (invoiceId == null)
            {
                await InvoiceService.CreateInvoiceAsync(invoice);
            }
            else
            {
                await InvoiceService.UpdateInvoiceAsync(invoice);
            }

            NavigationManager.NavigateTo("/faktury");
        }
		catch (DbUpdateException)
		{
			errorMessage = "Nepodařilo se uložit fakturu do databáze.Zkuste to prosím znovu.";
        }
        catch (Exception ex)
		{
			errorMessage = "Neočekávaná chyba. Zkuste to prosím znovu nebo kontaktujte podporu. : " + ex.Message;
		}

    }

    private void SearchReservation(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";

        filteredReservations = reservations
            .Where(r => r.InvoiceId == null && !string.IsNullOrEmpty(searchTerm) &&
                (r.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 r.CheckIn.ToShortDateString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 r.CheckOut.ToShortDateString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 (!string.IsNullOrEmpty(r.RoomNumber) && r.RoomNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            )
            .ToList();
    }



    private void HideReservationList()
    {
        filteredReservations.Clear();
    }

 
    private void OnCurrencyChanged()
    {
        RecalculatePrice();
    }



    private void RecalculatePrice()
    {
        var selectedCurrency = currencies.FirstOrDefault(c => c.Id == invoice.CurrencyId);
        if (selectedCurrency is null || selectedCurrency.Rate <= 0)
        {
            errorMessage = "Nepodařilo se najít měnu faktury nebo kurz je neplatný.";
            return;
        }

        decimal basePriceCZK = 0;

        // Přepočítej každou rezervaci do CZK podle její měny
        foreach (var reservation in invoice.Reservations)
        {
            var reservationCurrency = currencies.FirstOrDefault(c => c.Symbol == reservation.CurrencySymbol);
            if (reservationCurrency == null || reservationCurrency.Rate <= 0)
            {
                errorMessage = $"Nelze najít kurz měny {reservation.CurrencySymbol} pro rezervaci č. {reservation.Id}.";
                return;
            }

            basePriceCZK += reservation.TotalPrice * reservationCurrency.Rate;
        }

        if (invoice.Items != null && invoice.Items.Any())
        {
            basePriceCZK += invoice.Items.Sum(i => i.Price);
        }

        if (invoice.Discount > 0)
        {
            basePriceCZK -= basePriceCZK * invoice.Discount / 100;
        }

        if (invoice.Prepayment > 0)
        {
            basePriceCZK -= invoice.Prepayment;
        }

        if (basePriceCZK < 0)
            basePriceCZK = 0;

        invoice.Price = Math.Round(basePriceCZK / selectedCurrency.Rate, 2);
    }



}