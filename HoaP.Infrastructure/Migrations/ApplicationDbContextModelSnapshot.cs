// <auto-generated />
using System;
using HoaP.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HoaP.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HoaP.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9312f03c-e572-4cdf-8c7f-289552bc02c2",
                            Description = "",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e8d39f82-54d6-4e61-87c6-2f89dc566aa1",
                            Description = "",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "11555f5b-7bdc-4fc6-b2ef-77481b1336be",
                            Description = "",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmployed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("longblob");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "19329d22-ce24-42ab-a8d7-db7255a28384",
                            AccessFailedCount = 0,
                            Address = "Hlavní 123",
                            City = "Praha",
                            ConcurrencyStamp = "06301ce2-930a-46bb-96db-9870eb5aaab0",
                            Country = "Česká republika",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            InsuranceCompanyId = 1,
                            IsEmployed = true,
                            JobTitle = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENY2mv1A/0bDdONUysTG4Jos7xQP6vPFhum82MRIfpUAcwYxwbm8THkGRTUloRiqXQ==",
                            PersonalIdentificationNumber = "CZ1234567890",
                            PhoneNumberConfirmed = false,
                            PlaceOfBirth = "Praha",
                            PostalCode = "11000",
                            Salary = 50000m,
                            SecurityStamp = "7b3a268d-cb24-496e-94e2-2750c93f141c",
                            StartDate = new DateTime(2025, 2, 13, 15, 8, 47, 509, DateTimeKind.Local).AddTicks(956),
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            Name = "USD",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            Name = "EUR",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            Name = "GBP",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            Name = "JPY",
                            Symbol = "¥"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            Name = "CZK",
                            Symbol = "Kč"
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Hlavní 123",
                            City = "Praha",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5899),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2030, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420725912987",
                            Email = "jan.novak@example.com",
                            FirstName = "Jan",
                            LastName = "Novák",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ1234567890",
                            Phone = "+420123456789",
                            PlaceOfBirth = "Praha",
                            PostalCode = "11000",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5901)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Náměstí 456",
                            City = "Brno",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5909),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2029, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420725912298",
                            Email = "petr.svoboda@example.com",
                            FirstName = "Petr",
                            LastName = "Svoboda",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ0987654321",
                            Phone = "+420987654321",
                            PlaceOfBirth = "Brno",
                            PostalCode = "60200",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5910)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sokolská 789",
                            City = "Ostrava",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5918),
                            DateOfBirth = new DateTime(1992, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2031, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420745912987",
                            Email = "marie.cerna@example.com",
                            FirstName = "Marie",
                            LastName = "Černá",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ4567891234",
                            Phone = "+420654789123",
                            PlaceOfBirth = "Ostrava",
                            PostalCode = "70200",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5919)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Jasná 321",
                            City = "Plzeň",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5926),
                            DateOfBirth = new DateTime(1988, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2032, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2022, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420725612987",
                            Email = "anna.havlickova@example.com",
                            FirstName = "Anna",
                            LastName = "Havlíčková",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ3216549870",
                            Phone = "+420321654987",
                            PlaceOfBirth = "Plzeň",
                            PostalCode = "30100",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5927)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Květná 159",
                            City = "Liberec",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5935),
                            DateOfBirth = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2031, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420725922987",
                            Email = "tomas.prochazka@example.com",
                            FirstName = "Tomáš",
                            LastName = "Procházka",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ1597534680",
                            Phone = "+420159753468",
                            PlaceOfBirth = "Liberec",
                            PostalCode = "46000",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5936)
                        },
                        new
                        {
                            Id = 6,
                            Address = "Lípa 753",
                            City = "Ústí nad Labem",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5944),
                            DateOfBirth = new DateTime(1998, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2030, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2020, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420725912387",
                            Email = "petra.dvorakova@example.com",
                            FirstName = "Petra",
                            LastName = "Dvořáková",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ7539518520",
                            Phone = "+420753951852",
                            PlaceOfBirth = "Ústí nad Labem",
                            PostalCode = "40000",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5945)
                        },
                        new
                        {
                            Id = 7,
                            Address = "Březová 852",
                            City = "Hradec Králové",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5952),
                            DateOfBirth = new DateTime(1987, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2031, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420725112987",
                            Email = "jakub.novotny@example.com",
                            FirstName = "Jakub",
                            LastName = "Novotný",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ8524567890",
                            Phone = "+420852456789",
                            PlaceOfBirth = "Hradec Králové",
                            PostalCode = "50000",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5953)
                        },
                        new
                        {
                            Id = 8,
                            Address = "Růžová 258",
                            City = "Zlín",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6025),
                            DateOfBirth = new DateTime(1993, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2031, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2021, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420025912987",
                            Email = "lucie.krejcova@example.com",
                            FirstName = "Lucie",
                            LastName = "Krejčová",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ2589631470",
                            Phone = "+420258963147",
                            PlaceOfBirth = "Zlín",
                            PostalCode = "76000",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6027)
                        },
                        new
                        {
                            Id = 9,
                            Address = "Modrá 369",
                            City = "Karlovy Vary",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6035),
                            DateOfBirth = new DateTime(1980, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2028, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2018, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420723912987",
                            Email = "martin.fiala@example.com",
                            FirstName = "Martin",
                            LastName = "Fiala",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ3692581470",
                            Phone = "+420369258147",
                            PlaceOfBirth = "Karlovy Vary",
                            PostalCode = "36000",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6036)
                        },
                        new
                        {
                            Id = 10,
                            Address = "Violetová 741",
                            City = "Jihlava",
                            Country = "Česká republika",
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6043),
                            DateOfBirth = new DateTime(1991, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfExpiry = new DateTime(2031, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfIssue = new DateTime(2021, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentNumber = "+420225912987",
                            Email = "barbora.kovarova@example.com",
                            FirstName = "Barbora",
                            LastName = "Kovářová",
                            Nationality = "Česká republika",
                            PersonalIdentificationNumber = "CZ7418529630",
                            Phone = "+420741852963",
                            PlaceOfBirth = "Jihlava",
                            PostalCode = "58601",
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6044)
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.InsuranceCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("InsuranceCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "",
                            Email = "",
                            Name = "Česká pojišťovna",
                            PhoneNumber = "",
                            Website = ""
                        },
                        new
                        {
                            Id = 2,
                            Address = "",
                            Email = "",
                            Name = "Kooperativa",
                            PhoneNumber = "",
                            Website = ""
                        },
                        new
                        {
                            Id = 3,
                            Address = "",
                            Email = "",
                            Name = "Allianz",
                            PhoneNumber = "",
                            Website = ""
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Prepayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6159),
                            CurrencyId = 1,
                            Description = "",
                            Discount = 0.0m,
                            DueDate = new DateTime(2025, 3, 15, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6157),
                            IsCanceled = false,
                            IsPaid = false,
                            IssueDate = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6155),
                            Prepayment = 0.0m,
                            Price = 1500.00m,
                            ReservationId = 1,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6160)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6168),
                            CurrencyId = 1,
                            Description = "",
                            Discount = 0.0m,
                            DueDate = new DateTime(2025, 3, 15, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6166),
                            IsCanceled = false,
                            IsPaid = true,
                            IssueDate = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6165),
                            Prepayment = 0.0m,
                            Price = 2500.00m,
                            ReservationId = 2,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6169)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6176),
                            CurrencyId = 1,
                            Description = "",
                            Discount = 0.0m,
                            DueDate = new DateTime(2025, 3, 15, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6175),
                            IsCanceled = false,
                            IsPaid = false,
                            IssueDate = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6174),
                            Prepayment = 0.0m,
                            Price = 1200.00m,
                            ReservationId = 3,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6177)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6185),
                            CurrencyId = 1,
                            Description = "",
                            Discount = 0.0m,
                            DueDate = new DateTime(2025, 3, 15, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6184),
                            IsCanceled = false,
                            IsPaid = true,
                            IssueDate = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6183),
                            Prepayment = 0.0m,
                            Price = 2000.00m,
                            ReservationId = 4,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6186)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6194),
                            CurrencyId = 1,
                            Description = "",
                            Discount = 0.0m,
                            DueDate = new DateTime(2025, 3, 15, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6193),
                            IsCanceled = false,
                            IsPaid = false,
                            IssueDate = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6192),
                            Prepayment = 0.0m,
                            Price = 1700.00m,
                            ReservationId = 5,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6195)
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.MealPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MealPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bez stravy",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Snídaně",
                            Price = 0m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Polopenze",
                            Price = 0m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Plná penze",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            IsActive = true,
                            Name = "Hotově"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            IsActive = true,
                            Name = "Kartou"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            IsActive = true,
                            Name = "Převodem"
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdminNote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MealPlanId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequest")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("ReservationStatusId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminNote = "Poznámka pro recepci",
                            Adults = 1,
                            CheckIn = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Children = 0,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6092),
                            CustomerId = 1,
                            MealPlanId = 2,
                            ReservationStatusId = 1,
                            RoomId = 1,
                            SpecialRequest = "Přistýlka",
                            TotalPrice = 6600m,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6093)
                        },
                        new
                        {
                            Id = 2,
                            AdminNote = "Poznámka pro recepci",
                            Adults = 2,
                            CheckIn = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2025, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Children = 1,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6099),
                            CustomerId = 2,
                            MealPlanId = 3,
                            ReservationStatusId = 1,
                            RoomId = 2,
                            SpecialRequest = "Dětská postýlka",
                            TotalPrice = 13500m,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6100)
                        },
                        new
                        {
                            Id = 3,
                            AdminNote = "Poznámka pro recepci",
                            Adults = 3,
                            CheckIn = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Children = 2,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6106),
                            CustomerId = 3,
                            MealPlanId = 4,
                            ReservationStatusId = 1,
                            RoomId = 3,
                            SpecialRequest = "Bezlepková dieta",
                            TotalPrice = 19000m,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6107)
                        },
                        new
                        {
                            Id = 4,
                            AdminNote = "Poznámka pro recepci",
                            Adults = 4,
                            CheckIn = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2025, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Children = 3,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6113),
                            CustomerId = 4,
                            MealPlanId = 4,
                            ReservationStatusId = 1,
                            RoomId = 4,
                            SpecialRequest = "Elktro mobil",
                            TotalPrice = 22500m,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6114)
                        },
                        new
                        {
                            Id = 5,
                            AdminNote = "Poznámka pro recepci",
                            Adults = 1,
                            CheckIn = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Children = 0,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6120),
                            CustomerId = 5,
                            MealPlanId = 2,
                            ReservationStatusId = 1,
                            RoomId = 1,
                            SpecialRequest = "Přistýlka",
                            TotalPrice = 6600m,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(6121)
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Potvrzená"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Zrušená"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Čeká na platbu"
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxAdults")
                        .HasColumnType("int");

                    b.Property<int>("MaxChildren")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoomStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoomStatusId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5766),
                            Description = "Jednolůžkový pokoj s výhledem na zahradu",
                            IsDisable = false,
                            MaxAdults = 1,
                            MaxChildren = 0,
                            Price = 2200m,
                            RoomNumber = "101",
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5826)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5834),
                            Description = "Dvoulůžkový pokoj",
                            IsDisable = false,
                            MaxAdults = 2,
                            MaxChildren = 1,
                            Price = 2700m,
                            RoomNumber = "102",
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5835)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5837),
                            Description = "Třílůžkový pokoj s výhledem na moře",
                            IsDisable = false,
                            MaxAdults = 3,
                            MaxChildren = 2,
                            Price = 3800m,
                            RoomNumber = "103",
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5838)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5840),
                            Description = "Rodinný pokoj",
                            IsDisable = false,
                            MaxAdults = 4,
                            MaxChildren = 3,
                            Price = 4500m,
                            RoomNumber = "104",
                            RoomStatusId = 1,
                            RoomTypeId = 4,
                            UpdatedAt = new DateTime(2025, 2, 13, 15, 8, 47, 544, DateTimeKind.Local).AddTicks(5841)
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.RoomAmenity", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("RoomAmenities");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.RoomStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoomStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Volný"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Obsazený"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mimo provoz"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Čeká na úklid"
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Jednolůžkový pokoj"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dvoulůžkový pokoj"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Třílůžkový pokoj"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rodinný pokoj"
                        });
                });

            modelBuilder.Entity("HoaP.Domain.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HoaP.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.InsuranceCompany", "InsuranceCompany")
                        .WithMany()
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Guest", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.Reservation", "Reservation")
                        .WithMany("Guests")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.Navigation("Currency");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Payment", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");

                    b.HasOne("HoaP.Domain.Entities.MealPlan", "MealPlan")
                        .WithMany()
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.ReservationStatus", "ReservationStatus")
                        .WithMany()
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MealPlan");

                    b.Navigation("ReservationStatus");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Review", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.Room", "Room")
                        .WithMany("Reviews")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Room", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.RoomStatus", "RoomStatus")
                        .WithMany()
                        .HasForeignKey("RoomStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomStatus");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.RoomAmenity", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.Amenity", "Amenity")
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.TaskItem", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.AppUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaP.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HoaP.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("HoaP.Domain.Entities.Room", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("RoomAmenities");
                });
#pragma warning restore 612, 618
        }
    }
}
